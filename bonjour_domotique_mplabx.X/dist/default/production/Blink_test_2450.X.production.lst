

Microchip Technology PIC18 LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Nov 15 18:02:17 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	18F24K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	intcode,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38  0000                     _ADCON0bits	set	4034
    39  0000                     _ANSELBbits	set	3932
    40  0000                     _ANSELCbits	set	3933
    41  0000                     _CM1CON0bits	set	3992
    42  0000                     _INTCON2bits	set	4081
    43  0000                     _INTCONbits	set	4082
    44  0000                     _LATBbits	set	3978
    45  0000                     _OSCCONbits	set	4051
    46  0000                     _PIE1bits	set	3997
    47  0000                     _PIR1bits	set	3998
    48  0000                     _PORTBbits	set	3969
    49  0000                     _RCONbits	set	4048
    50  0000                     _RCREG1	set	4014
    51  0000                     _RCSTA1	set	4011
    52  0000                     _RCSTA1bits	set	4011
    53  0000                     _SPBRG1	set	4015
    54  0000                     _SPBRGH1	set	4016
    55  0000                     _T0CON	set	4053
    56  0000                     _T0CONbits	set	4053
    57  0000                     _TMR0H	set	4055
    58  0000                     _TMR0L	set	4054
    59  0000                     _TRISBbits	set	3987
    60  0000                     _TXREG1	set	4013
    61  0000                     _TXSTA1	set	4012
    62  0000                     _TXSTA1bits	set	4012
    63                           
    64 ;; *************** function _high_isr *****************
    65 ;; Defined at:
    66 ;;		line 11 in file "interrupts.c"
    67 ;; Parameters:    Size  Location     Type
    68 ;;		None
    69 ;; Auto vars:     Size  Location     Type
    70 ;;		None
    71 ;; Return value:  Size  Location     Type
    72 ;;		None               void
    73 ;; Registers used:
    74 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
    75 ;; Tracked objects:
    76 ;;		On entry : 0/0
    77 ;;		On exit  : 0/0
    78 ;;		Unchanged: 0/0
    79 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
    80 ;;      Params:         0       0       0       0       0       0       0       0       0
    81 ;;      Locals:         0       0       0       0       0       0       0       0       0
    82 ;;      Temps:         14       0       0       0       0       0       0       0       0
    83 ;;      Totals:        14       0       0       0       0       0       0       0       0
    84 ;;Total ram usage:       14 bytes
    85 ;; Hardware stack levels used:    1
    86 ;; Hardware stack levels required when called:    1
    87 ;; This function calls:
    88 ;;		_CyclicBitBuffer_read
    89 ;;		_CyclicBitBuffer_write
    90 ;;		_WriteTimer0
    91 ;;		i2_CyclicBitBuffer_resetRead
    92 ;; This function is called by:
    93 ;;		Interrupt level 2
    94 ;; This function uses a non-reentrant model
    95 ;;
    96                           
    97 ;; *************** function _low_isr *****************
    98 ;; Defined at:
    99 ;;		line 55 in file "interrupts.c"
   100 ;; Parameters:    Size  Location     Type
   101 ;;		None
   102 ;; Auto vars:     Size  Location     Type
   103 ;;		None
   104 ;; Return value:  Size  Location     Type
   105 ;;		None               void
   106 ;; Registers used:
   107 ;;		None
   108 ;; Tracked objects:
   109 ;;		On entry : 0/0
   110 ;;		On exit  : 0/0
   111 ;;		Unchanged: 0/0
   112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   113 ;;      Params:         0       0       0       0       0       0       0       0       0
   114 ;;      Locals:         0       0       0       0       0       0       0       0       0
   115 ;;      Temps:         14       0       0       0       0       0       0       0       0
   116 ;;      Totals:        14       0       0       0       0       0       0       0       0
   117 ;;Total ram usage:       14 bytes
   118 ;; Hardware stack levels used:    1
   119 ;; This function calls:
   120 ;;		Nothing
   121 ;; This function is called by:
   122 ;;		Interrupt level 2
   123 ;; This function uses a non-reentrant model
   124 ;;
   125                           
   126                           	psect	intcode
   127  000008                     __pintcode:
   128                           	opt stack 0
   129                           
   130                           ; #config settings
   131  000008                     _high_isr:
   132                           	opt stack 26
   133                           
   134                           ;incstack = 0
   135  000008  CFFA F006          	movff	pclath,??_high_isr
   136  00000C  CFFB F007          	movff	pclatu,??_high_isr+1
   137  000010  CFE9 F008          	movff	fsr0l,??_high_isr+2
   138  000014  CFEA F009          	movff	fsr0h,??_high_isr+3
   139  000018  CFE1 F00A          	movff	fsr1l,??_high_isr+4
   140  00001C  CFE2 F00B          	movff	fsr1h,??_high_isr+5
   141  000020  CFD9 F00C          	movff	fsr2l,??_high_isr+6
   142  000024  CFDA F00D          	movff	fsr2h,??_high_isr+7
   143  000028  CFF3 F00E          	movff	prodl,??_high_isr+8
   144  00002C  CFF4 F00F          	movff	prodh,??_high_isr+9
   145  000030  CFF6 F010          	movff	tblptrl,??_high_isr+10
   146  000034  CFF7 F011          	movff	tblptrh,??_high_isr+11
   147  000038  CFF8 F012          	movff	tblptru,??_high_isr+12
   148  00003C  CFF5 F013          	movff	tablat,??_high_isr+13
   149                           
   150                           ;interrupts.c: 12: if(INTCONbits.TMR0IF) {
   151  000040  A4F2               	btfss	intcon,2,c	;volatile
   152  000042  D05B               	goto	i2l210
   153                           
   154                           ;interrupts.c: 13: WriteTimer0(0x50);
   155  000044  0E00               	movlw	0
   156  000046  6E02               	movwf	WriteTimer0@timer0+1,c
   157  000048  0E50               	movlw	80
   158  00004A  6E01               	movwf	WriteTimer0@timer0,c
   159  00004C  EC23  F003         	call	_WriteTimer0	;wreg free
   160                           
   161                           ;interrupts.c: 14: count++;
   162  000050  4A37               	infsnz	_count,f,c
   163  000052  2A38               	incf	_count+1,f,c
   164                           
   165                           ;interrupts.c: 16: if(CyclicBitBuffer_flags.record) {
   166  000054  A23F               	btfss	_CyclicBitBuffer_flags,1,c
   167  000056  D029               	goto	i2l200
   168                           
   169                           ;interrupts.c: 17: pinValue = PORTBbits.RB0;
   170  000058  0E00               	movlw	0
   171  00005A  B081               	btfsc	3969,0,c	;volatile
   172  00005C  0E01               	movlw	1
   173  00005E  6E42               	movwf	_pinValue,c
   174                           
   175                           ;interrupts.c: 18: if(oneCount > 5) {
   176  000060  0E05               	movlw	5
   177  000062  6441               	cpfsgt	_oneCount,c
   178  000064  D016               	goto	i2l1265
   179                           
   180                           ;interrupts.c: 19: CyclicBitBuffer_write(pinValue);
   181  000066  C042  F001         	movff	_pinValue,CyclicBitBuffer_write@b
   182  00006A  6A02               	clrf	CyclicBitBuffer_write@b+1,c
   183  00006C  EC84  F002         	call	_CyclicBitBuffer_write	;wreg free
   184                           
   185                           ;interrupts.c: 20: if(count == ((unsigned short)12296)) {
   186  000070  5038               	movf	_count+1,w,c
   187  000072  0A30               	xorlw	48
   188  000074  0E08               	movlw	8
   189  000076  B4D8               	btfsc	status,2,c
   190  000078  1837               	xorwf	_count,w,c
   191  00007A  A4D8               	btfss	status,2,c
   192  00007C  D03D               	goto	i2l1287
   193                           
   194                           ;interrupts.c: 21: (INTCONbits.TMR0IE = 0);
   195  00007E  9AF2               	bcf	intcon,5,c	;volatile
   196                           
   197                           ;interrupts.c: 22: CyclicBitBuffer_flags.record = 0;
   198  000080  923F               	bcf	_CyclicBitBuffer_flags,1,c
   199                           
   200                           ;interrupts.c: 23: count = 0;
   201  000082  0E00               	movlw	0
   202  000084  6E38               	movwf	_count+1,c
   203  000086  0E00               	movlw	0
   204  000088  6E37               	movwf	_count,c
   205                           
   206                           ;interrupts.c: 24: oneCount = 0;
   207  00008A  0E00               	movlw	0
   208  00008C  6E41               	movwf	_oneCount,c
   209                           
   210                           ;interrupts.c: 25: CyclicBitBuffer_flags.recordOver = 1;
   211  00008E  843F               	bsf	_CyclicBitBuffer_flags,2,c
   212  000090  D033               	goto	i2l1287
   213  000092                     i2l1265:
   214                           
   215                           ;interrupts.c: 28: count = 0;
   216  000092  0E00               	movlw	0
   217  000094  6E38               	movwf	_count+1,c
   218  000096  0E00               	movlw	0
   219  000098  6E37               	movwf	_count,c
   220                           
   221                           ;interrupts.c: 29: if(1 == pinValue) {
   222  00009A  0442               	decf	_pinValue,w,c
   223  00009C  A4D8               	btfss	status,2,c
   224  00009E  D002               	goto	i2l1271
   225                           
   226                           ;interrupts.c: 30: oneCount++;
   227  0000A0  2A41               	incf	_oneCount,f,c
   228                           
   229                           ;interrupts.c: 31: } else {
   230  0000A2  D02A               	goto	i2l1287
   231  0000A4                     i2l1271:
   232                           
   233                           ;interrupts.c: 32: oneCount = 0;
   234  0000A4  0E00               	movlw	0
   235  0000A6  6E41               	movwf	_oneCount,c
   236  0000A8  D027               	goto	i2l1287
   237  0000AA                     i2l200:
   238  0000AA  A63F               	btfss	_CyclicBitBuffer_flags,3,c
   239  0000AC  D025               	goto	i2l1287
   240                           
   241                           ;interrupts.c: 38: LATBbits.LATB3 = CyclicBitBuffer_read();
   242  0000AE  EC5D  F002         	call	_CyclicBitBuffer_read	;wreg free
   243  0000B2  4601               	rlncf	?_CyclicBitBuffer_read,f,c
   244  0000B4  4601               	rlncf	?_CyclicBitBuffer_read,f,c
   245  0000B6  4601               	rlncf	?_CyclicBitBuffer_read,f,c
   246  0000B8  508A               	movf	3978,w,c	;volatile
   247  0000BA  1801               	xorwf	?_CyclicBitBuffer_read,w,c
   248  0000BC  0BF7               	andlw	-9
   249  0000BE  1801               	xorwf	?_CyclicBitBuffer_read,w,c
   250  0000C0  6E8A               	movwf	3978,c	;volatile
   251                           
   252                           ;interrupts.c: 39: if(count == (unsigned short)((unsigned short)12296)) {
   253  0000C2  5038               	movf	_count+1,w,c
   254  0000C4  0A30               	xorlw	48
   255  0000C6  0E08               	movlw	8
   256  0000C8  B4D8               	btfsc	status,2,c
   257  0000CA  1837               	xorwf	_count,w,c
   258  0000CC  A4D8               	btfss	status,2,c
   259  0000CE  D014               	goto	i2l1287
   260                           
   261                           ;interrupts.c: 40: sendTime++;
   262  0000D0  4A3B               	infsnz	_sendTime,f,c
   263  0000D2  2A3C               	incf	_sendTime+1,f,c
   264                           
   265                           ;interrupts.c: 41: if(sendTime > 1) {
   266  0000D4  0E02               	movlw	2
   267  0000D6  5C3B               	subwf	_sendTime,w,c
   268  0000D8  0E00               	movlw	0
   269  0000DA  583C               	subwfb	_sendTime+1,w,c
   270  0000DC  A0D8               	btfss	status,0,c
   271  0000DE  D006               	goto	i2l209
   272                           
   273                           ;interrupts.c: 42: (INTCONbits.TMR0IE = 0);
   274  0000E0  9AF2               	bcf	intcon,5,c	;volatile
   275                           
   276                           ;interrupts.c: 43: CyclicBitBuffer_flags.transmit = 0;
   277  0000E2  963F               	bcf	_CyclicBitBuffer_flags,3,c
   278                           
   279                           ;interrupts.c: 44: sendTime = 0;
   280  0000E4  0E00               	movlw	0
   281  0000E6  6E3C               	movwf	_sendTime+1,c
   282  0000E8  0E00               	movlw	0
   283  0000EA  6E3B               	movwf	_sendTime,c
   284  0000EC                     i2l209:
   285                           
   286                           ;interrupts.c: 45: }
   287                           ;interrupts.c: 46: count = 0;
   288  0000EC  0E00               	movlw	0
   289  0000EE  6E38               	movwf	_count+1,c
   290  0000F0  0E00               	movlw	0
   291  0000F2  6E37               	movwf	_count,c
   292                           
   293                           ;interrupts.c: 47: CyclicBitBuffer_resetRead();
   294  0000F4  EC59  F003         	call	i2_CyclicBitBuffer_resetRead	;wreg free
   295  0000F8                     i2l1287:
   296                           
   297                           ;interrupts.c: 48: }
   298                           ;interrupts.c: 49: }
   299                           ;interrupts.c: 50: INTCONbits.TMR0IF = 0;
   300  0000F8  94F2               	bcf	intcon,2,c	;volatile
   301  0000FA                     i2l210:
   302  0000FA  C013  FFF5         	movff	??_high_isr+13,tablat
   303  0000FE  C012  FFF8         	movff	??_high_isr+12,tblptru
   304  000102  C011  FFF7         	movff	??_high_isr+11,tblptrh
   305  000106  C010  FFF6         	movff	??_high_isr+10,tblptrl
   306  00010A  C00F  FFF4         	movff	??_high_isr+9,prodh
   307  00010E  C00E  FFF3         	movff	??_high_isr+8,prodl
   308  000112  C00D  FFDA         	movff	??_high_isr+7,fsr2h
   309  000116  C00C  FFD9         	movff	??_high_isr+6,fsr2l
   310  00011A  C00B  FFE2         	movff	??_high_isr+5,fsr1h
   311  00011E  C00A  FFE1         	movff	??_high_isr+4,fsr1l
   312  000122  C009  FFEA         	movff	??_high_isr+3,fsr0h
   313  000126  C008  FFE9         	movff	??_high_isr+2,fsr0l
   314  00012A  C007  FFFB         	movff	??_high_isr+1,pclatu
   315  00012E  C006  FFFA         	movff	??_high_isr,pclath
   316  000132  0011               	retfie		f
   317  000134                     __end_of_high_isr:
   318                           	opt stack 0
   319  000134                     _low_isr:
   320                           	opt stack 27
   321                           
   322                           ;incstack = 0
   323  000134  CFFA F014          	movff	pclath,??_low_isr
   324  000138  CFFB F015          	movff	pclatu,??_low_isr+1
   325  00013C  CFE9 F016          	movff	fsr0l,??_low_isr+2
   326  000140  CFEA F017          	movff	fsr0h,??_low_isr+3
   327  000144  CFE1 F018          	movff	fsr1l,??_low_isr+4
   328  000148  CFE2 F019          	movff	fsr1h,??_low_isr+5
   329  00014C  CFD9 F01A          	movff	fsr2l,??_low_isr+6
   330  000150  CFDA F01B          	movff	fsr2h,??_low_isr+7
   331  000154  CFF3 F01C          	movff	prodl,??_low_isr+8
   332  000158  CFF4 F01D          	movff	prodh,??_low_isr+9
   333  00015C  CFF6 F01E          	movff	tblptrl,??_low_isr+10
   334  000160  CFF7 F01F          	movff	tblptrh,??_low_isr+11
   335  000164  CFF8 F020          	movff	tblptru,??_low_isr+12
   336  000168  CFF5 F021          	movff	tablat,??_low_isr+13
   337  00016C  C021  FFF5         	movff	??_low_isr+13,tablat
   338  000170  C020  FFF8         	movff	??_low_isr+12,tblptru
   339  000174  C01F  FFF7         	movff	??_low_isr+11,tblptrh
   340  000178  C01E  FFF6         	movff	??_low_isr+10,tblptrl
   341  00017C  C01D  FFF4         	movff	??_low_isr+9,prodh
   342  000180  C01C  FFF3         	movff	??_low_isr+8,prodl
   343  000184  C01B  FFDA         	movff	??_low_isr+7,fsr2h
   344  000188  C01A  FFD9         	movff	??_low_isr+6,fsr2l
   345  00018C  C019  FFE2         	movff	??_low_isr+5,fsr1h
   346  000190  C018  FFE1         	movff	??_low_isr+4,fsr1l
   347  000194  C017  FFEA         	movff	??_low_isr+3,fsr0h
   348  000198  C016  FFE9         	movff	??_low_isr+2,fsr0l
   349  00019C  C015  FFFB         	movff	??_low_isr+1,pclatu
   350  0001A0  C014  FFFA         	movff	??_low_isr,pclath
   351  0001A4  0011               	retfie		f
   352  0001A6                     __end_of_low_isr:
   353                           	opt stack 0
   354  0000                     pclatu	equ	0xFFB
   355                           pclath	equ	0xFFA
   356                           tblptru	equ	0xFF8
   357                           tblptrh	equ	0xFF7
   358                           tblptrl	equ	0xFF6
   359                           tablat	equ	0xFF5
   360                           prodh	equ	0xFF4
   361                           prodl	equ	0xFF3
   362                           intcon	equ	0xFF2
   363                           fsr0h	equ	0xFEA
   364                           fsr0l	equ	0xFE9
   365                           fsr1h	equ	0xFE2
   366                           fsr1l	equ	0xFE1
   367                           fsr2h	equ	0xFDA
   368                           fsr2l	equ	0xFD9
   369                           status	equ	0xFD8
   370                           
   371                           	psect	cinit
   372  0005B0                     __pcinit:
   373                           	opt stack 0
   374  0005B0                     start_initialization:
   375                           	opt stack 0
   376  0005B0                     __initialization:
   377                           	opt stack 0
   378                           
   379                           ; Clear objects allocated to BIGRAM (1537 bytes)
   380  0005B0  EE01  F0FF         	lfsr	0,__pbssBIGRAM
   381  0005B4  EE16 F001          	lfsr	1,1537
   382  0005B8                     clear_0:
   383  0005B8  6AEE               	clrf	postinc0,c
   384  0005BA  50E5               	movf	postdec1,w,c
   385  0005BC  50E1               	movf	fsr1l,w,c
   386  0005BE  E1FC               	bnz	clear_0
   387  0005C0  50E2               	movf	fsr1h,w,c
   388  0005C2  E1FA               	bnz	clear_0
   389                           
   390                           ; Clear objects allocated to COMRAM (14 bytes)
   391  0005C4  EE00  F037         	lfsr	0,__pbssCOMRAM
   392  0005C8  0E0E               	movlw	14
   393  0005CA                     clear_1:
   394  0005CA  6AEE               	clrf	postinc0,c
   395  0005CC  06E8               	decf	wreg,f,c
   396  0005CE  E1FD               	bnz	clear_1
   397  0005D0                     end_of_initialization:
   398                           	opt stack 0
   399  0005D0                     __end_of__initialization:
   400                           	opt stack 0
   401  0005D0  0100               	movlb	0
   402  0005D2  EF61  F001         	goto	_main	;jump to C main() function
   403                           pclatu	equ	0xFFB
   404                           pclath	equ	0xFFA
   405                           tblptru	equ	0xFF8
   406                           tblptrh	equ	0xFF7
   407                           tblptrl	equ	0xFF6
   408                           tablat	equ	0xFF5
   409                           prodh	equ	0xFF4
   410                           prodl	equ	0xFF3
   411                           intcon	equ	0xFF2
   412                           postinc0	equ	0xFEE
   413                           fsr0h	equ	0xFEA
   414                           fsr0l	equ	0xFE9
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1h	equ	0xFE2
   418                           fsr1l	equ	0xFE1
   419                           fsr2h	equ	0xFDA
   420                           fsr2l	equ	0xFD9
   421                           status	equ	0xFD8
   422                           
   423                           	psect	bssCOMRAM
   424  000037                     __pbssCOMRAM:
   425                           	opt stack 0
   426  000037                     _count:
   427                           	opt stack 0
   428  000037                     	ds	2
   429  000039                     _readByteIndex:
   430                           	opt stack 0
   431  000039                     	ds	2
   432  00003B                     _sendTime:
   433                           	opt stack 0
   434  00003B                     	ds	2
   435  00003D                     _writeByteIndex:
   436                           	opt stack 0
   437  00003D                     	ds	2
   438  00003F                     _CyclicBitBuffer_flags:
   439                           	opt stack 0
   440  00003F                     	ds	1
   441  000040                     _USART1_Status:
   442                           	opt stack 0
   443  000040                     	ds	1
   444  000041                     _oneCount:
   445                           	opt stack 0
   446  000041                     	ds	1
   447  000042                     _pinValue:
   448                           	opt stack 0
   449  000042                     	ds	1
   450  000043                     _readBitIndex:
   451                           	opt stack 0
   452  000043                     	ds	1
   453  000044                     _writeBitIndex:
   454                           	opt stack 0
   455  000044                     	ds	1
   456                           pclatu	equ	0xFFB
   457                           pclath	equ	0xFFA
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           prodh	equ	0xFF4
   463                           prodl	equ	0xFF3
   464                           intcon	equ	0xFF2
   465                           postinc0	equ	0xFEE
   466                           fsr0h	equ	0xFEA
   467                           fsr0l	equ	0xFE9
   468                           wreg	equ	0xFE8
   469                           postdec1	equ	0xFE5
   470                           fsr1h	equ	0xFE2
   471                           fsr1l	equ	0xFE1
   472                           fsr2h	equ	0xFDA
   473                           fsr2l	equ	0xFD9
   474                           status	equ	0xFD8
   475                           
   476                           	psect	bssBIGRAM
   477  0001FF                     __pbssBIGRAM:
   478                           	opt stack 0
   479  0001FF                     _CyclicBitBuffer_buffer:
   480                           	opt stack 0
   481  0001FF                     	ds	1537
   482                           pclatu	equ	0xFFB
   483                           pclath	equ	0xFFA
   484                           tblptru	equ	0xFF8
   485                           tblptrh	equ	0xFF7
   486                           tblptrl	equ	0xFF6
   487                           tablat	equ	0xFF5
   488                           prodh	equ	0xFF4
   489                           prodl	equ	0xFF3
   490                           intcon	equ	0xFF2
   491                           postinc0	equ	0xFEE
   492                           fsr0h	equ	0xFEA
   493                           fsr0l	equ	0xFE9
   494                           wreg	equ	0xFE8
   495                           postdec1	equ	0xFE5
   496                           fsr1h	equ	0xFE2
   497                           fsr1l	equ	0xFE1
   498                           fsr2h	equ	0xFDA
   499                           fsr2l	equ	0xFD9
   500                           status	equ	0xFD8
   501                           
   502                           	psect	cstackCOMRAM
   503  000001                     __pcstackCOMRAM:
   504                           	opt stack 0
   505  000001                     ?_CyclicBitBuffer_read:
   506                           	opt stack 0
   507  000001                     CyclicBitBuffer_write@b:
   508                           	opt stack 0
   509  000001                     WriteTimer0@timer0:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x0
   513  000001                     	ds	2
   514  000003                     ??_CyclicBitBuffer_read:
   515  000003                     ??_CyclicBitBuffer_write:
   516  000003                     WriteTimer0@timer:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0x2
   520  000003                     	ds	1
   521  000004                     CyclicBitBuffer_read@ret:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x3
   525  000004                     	ds	2
   526  000006                     ??_high_isr:
   527                           
   528                           ; 0 bytes @ 0x5
   529  000006                     	ds	14
   530  000014                     ??_low_isr:
   531                           
   532                           ; 0 bytes @ 0x13
   533  000014                     	ds	14
   534  000022                     ?_CyclicBitBuffer_getBuffer:
   535                           	opt stack 0
   536  000022                     OpenTimer0@config:
   537                           	opt stack 0
   538  000022                     Read1USART@data:
   539                           	opt stack 0
   540  000022                     Write1USART@data:
   541                           	opt stack 0
   542  000022                     Delay100TCYx@unit:
   543                           	opt stack 0
   544  000022                     Delay1KTCYx@unit:
   545                           	opt stack 0
   546  000022                     RF433_receive@bufferLength:
   547                           	opt stack 0
   548  000022                     Open1USART@spbrg:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x21
   552  000022                     	ds	1
   553  000023                     ?_Serial_readFrame:
   554                           	opt stack 0
   555  000023                     Serial_readFrame@frame:
   556                           	opt stack 0
   557  000023                     Serial_sendFrame@frame:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x22
   561  000023                     	ds	1
   562  000024                     ??_Open1USART:
   563                           
   564                           ; 0 bytes @ 0x23
   565  000024                     	ds	1
   566  000025                     ??_Serial_sendFrame:
   567  000025                     ??_Serial_readFrame:
   568                           
   569                           ; 0 bytes @ 0x24
   570  000025                     	ds	2
   571  000027                     Open1USART@config:
   572                           	opt stack 0
   573  000027                     Serial_readFrame@i:
   574                           	opt stack 0
   575  000027                     Serial_sendFrame@i:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x26
   579  000027                     	ds	1
   580  000028                     
   581                           ; 0 bytes @ 0x27
   582  000028                     	ds	1
   583  000029                     Serial_readFrame@p:
   584                           	opt stack 0
   585  000029                     Serial_sendFrame@p:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x28
   589  000029                     	ds	2
   590  00002B                     
   591                           ; 2 bytes @ 0x2A
   592  00002B                     	ds	2
   593  00002D                     
   594                           ; 3 bytes @ 0x2C
   595  00002D                     	ds	3
   596  000030                     main@x:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0x2F
   600  000030                     	ds	2
   601  000032                     main@frame:
   602                           	opt stack 0
   603                           
   604                           ; 5 bytes @ 0x31
   605  000032                     	ds	5
   606                           pclatu	equ	0xFFB
   607                           pclath	equ	0xFFA
   608                           tblptru	equ	0xFF8
   609                           tblptrh	equ	0xFF7
   610                           tblptrl	equ	0xFF6
   611                           tablat	equ	0xFF5
   612                           prodh	equ	0xFF4
   613                           prodl	equ	0xFF3
   614                           intcon	equ	0xFF2
   615                           postinc0	equ	0xFEE
   616                           fsr0h	equ	0xFEA
   617                           fsr0l	equ	0xFE9
   618                           wreg	equ	0xFE8
   619                           postdec1	equ	0xFE5
   620                           fsr1h	equ	0xFE2
   621                           fsr1l	equ	0xFE1
   622                           fsr2h	equ	0xFDA
   623                           fsr2l	equ	0xFD9
   624                           status	equ	0xFD8
   625                           
   626 ;;
   627 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   628 ;;
   629 ;; *************** function _main *****************
   630 ;; Defined at:
   631 ;;		line 87 in file "main.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;  argc            2   42[COMRAM] int 
   634 ;;  argv            3   44[COMRAM] PTR PTR unsigned char 
   635 ;; Auto vars:     Size  Location     Type
   636 ;;  frame           5   49[COMRAM] struct serial_frame
   637 ;;  x               2   47[COMRAM] unsigned short 
   638 ;; Return value:  Size  Location     Type
   639 ;;                  2   42[COMRAM] int 
   640 ;; Registers used:
   641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   647 ;;      Params:         5       0       0       0       0       0       0       0       0
   648 ;;      Locals:         7       0       0       0       0       0       0       0       0
   649 ;;      Temps:          0       0       0       0       0       0       0       0       0
   650 ;;      Totals:        12       0       0       0       0       0       0       0       0
   651 ;;Total ram usage:       12 bytes
   652 ;; Hardware stack levels required when called:    5
   653 ;; This function calls:
   654 ;;		_CyclicBitBuffer_clearEvent
   655 ;;		_CyclicBitBuffer_getBuffer
   656 ;;		_CyclicBitBuffer_reset
   657 ;;		_RF433_init
   658 ;;		_RF433_receive
   659 ;;		_RF433_transmit
   660 ;;		_Serial_configSerialPort
   661 ;;		_Serial_readFrame
   662 ;;		_Serial_sendFrame
   663 ;;		_configClock
   664 ;;		_configInterruptPriority
   665 ;;		_configPorts
   666 ;;		_configTimer
   667 ;; This function is called by:
   668 ;;		Startup code after reset
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text0
   673  0002C2                     __ptext0:
   674                           	opt stack 0
   675  0002C2                     _main:
   676                           	opt stack 26
   677                           
   678                           ;main.c: 88: unsigned short x = 0;
   679                           
   680                           ;incstack = 0
   681  0002C2  0E00               	movlw	0
   682  0002C4  6E31               	movwf	main@x+1,c
   683  0002C6  0E00               	movlw	0
   684  0002C8  6E30               	movwf	main@x,c
   685                           
   686                           ;main.c: 89: SerialFrame frame;
   687                           ;main.c: 92: configClock();
   688  0002CA  EC78  F003         	call	_configClock	;wreg free
   689                           
   690                           ;main.c: 93: configPorts();
   691  0002CE  ECFB  F002         	call	_configPorts	;wreg free
   692                           
   693                           ;main.c: 94: configInterruptPriority();
   694  0002D2  EC66  F003         	call	_configInterruptPriority	;wreg free
   695                           
   696                           ;main.c: 95: configTimer();
   697  0002D6  EC44  F003         	call	_configTimer	;wreg free
   698                           
   699                           ;main.c: 98: Serial_configSerialPort();
   700  0002DA  EC2C  F003         	call	_Serial_configSerialPort	;wreg free
   701                           
   702                           ;main.c: 101: CyclicBitBuffer_reset();
   703  0002DE  EC6B  F003         	call	_CyclicBitBuffer_reset	;wreg free
   704                           
   705                           ;main.c: 103: RF433_init();
   706  0002E2  ECC2  F002         	call	_RF433_init	;wreg free
   707                           
   708                           ;main.c: 106: frame.content = CyclicBitBuffer_getBuffer();
   709  0002E6  EC70  F003         	call	_CyclicBitBuffer_getBuffer	;wreg free
   710  0002EA  C022  F035         	movff	?_CyclicBitBuffer_getBuffer,main@frame+3
   711  0002EE  C023  F036         	movff	?_CyclicBitBuffer_getBuffer+1,main@frame+4
   712  0002F2  D019               	goto	l1215
   713  0002F4                     l1199:
   714                           
   715                           ;main.c: 112: x++;
   716  0002F4  4A30               	infsnz	main@x,f,c
   717  0002F6  2A31               	incf	main@x+1,f,c
   718                           
   719                           ;main.c: 113: if(CyclicBitBuffer_flags.recordOver) {
   720  0002F8  A43F               	btfss	_CyclicBitBuffer_flags,2,c
   721  0002FA  D011               	goto	l1211
   722                           
   723                           ;main.c: 114: frame.content = CyclicBitBuffer_getBuffer();
   724  0002FC  EC70  F003         	call	_CyclicBitBuffer_getBuffer	;wreg free
   725  000300  C022  F035         	movff	?_CyclicBitBuffer_getBuffer,main@frame+3
   726  000304  C023  F036         	movff	?_CyclicBitBuffer_getBuffer+1,main@frame+4
   727                           
   728                           ;main.c: 115: frame.lenght = ((unsigned short)1537);
   729  000308  0E06               	movlw	6
   730  00030A  6E34               	movwf	main@frame+2,c
   731  00030C  0E01               	movlw	1
   732  00030E  6E33               	movwf	main@frame+1,c
   733                           
   734                           ;main.c: 116: Serial_sendFrame(&frame);
   735  000310  0E00               	movlw	high main@frame
   736  000312  6E24               	movwf	Serial_sendFrame@frame+1,c
   737  000314  0E32               	movlw	low main@frame
   738  000316  6E23               	movwf	Serial_sendFrame@frame,c
   739  000318  ECD9  F001         	call	_Serial_sendFrame	;wreg free
   740                           
   741                           ;main.c: 117: CyclicBitBuffer_flags.recordOver = 0;
   742  00031C  943F               	bcf	_CyclicBitBuffer_flags,2,c
   743  00031E                     l1211:
   744                           
   745                           ;main.c: 118: }
   746                           ;main.c: 120: if(0 == x) {
   747  00031E  5031               	movf	main@x+1,w,c
   748  000320  1030               	iorwf	main@x,w,c
   749  000322  B4D8               	btfsc	status,2,c
   750                           
   751                           ;main.c: 121: LATBbits.LATB4 ^= 1;
   752  000324  788A               	btg	3978,4,c	;volatile
   753  000326                     l1215:
   754  000326  0E00               	movlw	high main@frame
   755  000328  6E24               	movwf	Serial_readFrame@frame+1,c
   756  00032A  0E32               	movlw	low main@frame
   757  00032C  6E23               	movwf	Serial_readFrame@frame,c
   758  00032E  ECD5  F000         	call	_Serial_readFrame	;wreg free
   759  000332  5024               	movf	?_Serial_readFrame+1,w,c
   760  000334  1023               	iorwf	?_Serial_readFrame,w,c
   761  000336  B4D8               	btfsc	status,2,c
   762  000338  D7DD               	goto	l1199
   763                           
   764                           ;main.c: 122: }
   765                           ;main.c: 123: }
   766                           ;main.c: 125: (INTCONbits.TMR0IE = 0);
   767  00033A  9AF2               	bcf	intcon,5,c	;volatile
   768                           
   769                           ;main.c: 126: CyclicBitBuffer_clearEvent();
   770  00033C  EC75  F003         	call	_CyclicBitBuffer_clearEvent	;wreg free
   771                           
   772                           ;main.c: 130: if(0x01 == frame.header) {
   773  000340  0432               	decf	main@frame,w,c
   774  000342  A4D8               	btfss	status,2,c
   775  000344  D009               	goto	l1225
   776                           
   777                           ;main.c: 132: frame.header = 0x01;
   778  000346  0E01               	movlw	1
   779  000348  6E32               	movwf	main@frame,c
   780                           
   781                           ;main.c: 133: RF433_receive(&(frame.lenght));
   782  00034A  0E00               	movlw	high (main@frame+1)
   783  00034C  6E23               	movwf	RF433_receive@bufferLength+1,c
   784  00034E  0E33               	movlw	low (main@frame+1)
   785  000350  6E22               	movwf	RF433_receive@bufferLength,c
   786  000352  EC60  F003         	call	_RF433_receive	;wreg free
   787                           
   788                           ;main.c: 135: } else if(0x02 == frame.header) {
   789  000356  D7E7               	goto	l1215
   790  000358                     l1225:
   791  000358  5032               	movf	main@frame,w,c
   792  00035A  0A02               	xorlw	2
   793  00035C  A4D8               	btfss	status,2,c
   794  00035E  D00F               	goto	l1235
   795                           
   796                           ;main.c: 136: RF433_transmit();
   797  000360  ECA9  F002         	call	_RF433_transmit	;wreg free
   798                           
   799                           ;main.c: 137: frame.header = 0x02;
   800  000364  0E02               	movlw	2
   801  000366  6E32               	movwf	main@frame,c
   802                           
   803                           ;main.c: 138: frame.lenght = 0;
   804  000368  0E00               	movlw	0
   805  00036A  6E34               	movwf	main@frame+2,c
   806  00036C  0E00               	movlw	0
   807  00036E  6E33               	movwf	main@frame+1,c
   808                           
   809                           ;main.c: 139: Serial_sendFrame(&frame);
   810  000370  0E00               	movlw	high main@frame
   811  000372  6E24               	movwf	Serial_sendFrame@frame+1,c
   812  000374  0E32               	movlw	low main@frame
   813  000376  6E23               	movwf	Serial_sendFrame@frame,c
   814  000378  ECD9  F001         	call	_Serial_sendFrame	;wreg free
   815                           
   816                           ;main.c: 141: } else if(0x03 == frame.header) {
   817  00037C  D7D4               	goto	l1215
   818  00037E                     l1235:
   819  00037E  5032               	movf	main@frame,w,c
   820  000380  0A03               	xorlw	3
   821  000382  A4D8               	btfss	status,2,c
   822  000384  D009               	goto	l1241
   823                           
   824                           ;main.c: 142: frame.header = 0x04;
   825  000386  0E04               	movlw	4
   826  000388  6E32               	movwf	main@frame,c
   827                           
   828                           ;main.c: 143: Serial_sendFrame(&frame);
   829  00038A  0E00               	movlw	high main@frame
   830  00038C  6E24               	movwf	Serial_sendFrame@frame+1,c
   831  00038E  0E32               	movlw	low main@frame
   832  000390  6E23               	movwf	Serial_sendFrame@frame,c
   833  000392  ECD9  F001         	call	_Serial_sendFrame	;wreg free
   834                           
   835                           ;main.c: 144: } else {
   836  000396  D7C7               	goto	l1215
   837  000398                     l1241:
   838                           
   839                           ;main.c: 145: frame.header = 0xf0;
   840  000398  0EF0               	movlw	240
   841  00039A  6E32               	movwf	main@frame,c
   842                           
   843                           ;main.c: 146: frame.lenght = 0;
   844  00039C  0E00               	movlw	0
   845  00039E  6E34               	movwf	main@frame+2,c
   846  0003A0  0E00               	movlw	0
   847  0003A2  6E33               	movwf	main@frame+1,c
   848                           
   849                           ;main.c: 147: Serial_sendFrame(&frame);
   850  0003A4  0E00               	movlw	high main@frame
   851  0003A6  6E24               	movwf	Serial_sendFrame@frame+1,c
   852  0003A8  0E32               	movlw	low main@frame
   853  0003AA  6E23               	movwf	Serial_sendFrame@frame,c
   854  0003AC  ECD9  F001         	call	_Serial_sendFrame	;wreg free
   855  0003B0  D7BA               	goto	l1215
   856  0003B2                     __end_of_main:
   857                           	opt stack 0
   858                           pclatu	equ	0xFFB
   859                           pclath	equ	0xFFA
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           prodh	equ	0xFF4
   865                           prodl	equ	0xFF3
   866                           intcon	equ	0xFF2
   867                           postinc0	equ	0xFEE
   868                           fsr0h	equ	0xFEA
   869                           fsr0l	equ	0xFE9
   870                           wreg	equ	0xFE8
   871                           postdec1	equ	0xFE5
   872                           fsr1h	equ	0xFE2
   873                           fsr1l	equ	0xFE1
   874                           fsr2h	equ	0xFDA
   875                           fsr2l	equ	0xFD9
   876                           status	equ	0xFD8
   877                           
   878 ;; *************** function _configTimer *****************
   879 ;; Defined at:
   880 ;;		line 7 in file "Config.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;		None
   883 ;; Auto vars:     Size  Location     Type
   884 ;;		None
   885 ;; Return value:  Size  Location     Type
   886 ;;		None               void
   887 ;; Registers used:
   888 ;;		wreg, status,2, status,0, cstack
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   894 ;;      Params:         0       0       0       0       0       0       0       0       0
   895 ;;      Locals:         0       0       0       0       0       0       0       0       0
   896 ;;      Temps:          0       0       0       0       0       0       0       0       0
   897 ;;      Totals:         0       0       0       0       0       0       0       0       0
   898 ;;Total ram usage:        0 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; Hardware stack levels required when called:    3
   901 ;; This function calls:
   902 ;;		_OpenTimer0
   903 ;; This function is called by:
   904 ;;		_main
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           	psect	text1
   909  000688                     __ptext1:
   910                           	opt stack 0
   911  000688                     _configTimer:
   912                           	opt stack 27
   913                           
   914                           ;Config.c: 8: (INTCONbits.TMR0IE = 0);
   915                           
   916                           ;incstack = 0
   917  000688  9AF2               	bcf	intcon,5,c	;volatile
   918                           
   919                           ;Config.c: 9: INTCONbits.TMR0IF = 0;
   920  00068A  94F2               	bcf	intcon,2,c	;volatile
   921                           
   922                           ;Config.c: 10: OpenTimer0(0b01111111 & 0b11111111 & 0b11011111 & 0b11111111 & 0b11101111
      +                          );
   923  00068C  0E4F               	movlw	79
   924  00068E  ECEB  F002         	call	_OpenTimer0
   925                           
   926                           ;Config.c: 11: INTCONbits.TMR0IF = 0;
   927  000692  94F2               	bcf	intcon,2,c	;volatile
   928  000694  0012               	return	
   929  000696                     __end_of_configTimer:
   930                           	opt stack 0
   931                           pclatu	equ	0xFFB
   932                           pclath	equ	0xFFA
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           prodh	equ	0xFF4
   938                           prodl	equ	0xFF3
   939                           intcon	equ	0xFF2
   940                           postinc0	equ	0xFEE
   941                           fsr0h	equ	0xFEA
   942                           fsr0l	equ	0xFE9
   943                           wreg	equ	0xFE8
   944                           postdec1	equ	0xFE5
   945                           fsr1h	equ	0xFE2
   946                           fsr1l	equ	0xFE1
   947                           fsr2h	equ	0xFDA
   948                           fsr2l	equ	0xFD9
   949                           status	equ	0xFD8
   950                           
   951 ;; *************** function _OpenTimer0 *****************
   952 ;; Defined at:
   953 ;;		line 18 in file "/opt/microchip/xc8/v1.32/sources/pic18/plib/Timers/t0open.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;  config          1    wreg     unsigned char 
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  config          1   33[COMRAM] unsigned char 
   958 ;; Return value:  Size  Location     Type
   959 ;;		None               void
   960 ;; Registers used:
   961 ;;		wreg, status,2, status,0
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   967 ;;      Params:         0       0       0       0       0       0       0       0       0
   968 ;;      Locals:         1       0       0       0       0       0       0       0       0
   969 ;;      Temps:          0       0       0       0       0       0       0       0       0
   970 ;;      Totals:         1       0       0       0       0       0       0       0       0
   971 ;;Total ram usage:        1 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; Hardware stack levels required when called:    2
   974 ;; This function calls:
   975 ;;		Nothing
   976 ;; This function is called by:
   977 ;;		_configTimer
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text2
   982  0005D6                     __ptext2:
   983                           	opt stack 0
   984  0005D6                     _OpenTimer0:
   985                           	opt stack 27
   986                           
   987                           ;incstack = 0
   988                           ;OpenTimer0@config stored from wreg
   989  0005D6  6E22               	movwf	OpenTimer0@config,c
   990  0005D8  5022               	movf	OpenTimer0@config,w,c
   991  0005DA  0B7F               	andlw	127
   992  0005DC  6ED5               	movwf	4053,c	;volatile
   993  0005DE  0E00               	movlw	0
   994  0005E0  6ED7               	movwf	4055,c	;volatile
   995  0005E2  0E00               	movlw	0
   996  0005E4  6ED6               	movwf	4054,c	;volatile
   997  0005E6  94F2               	bcf	intcon,2,c	;volatile
   998  0005E8  AE22               	btfss	OpenTimer0@config,7,c
   999  0005EA  D002               	goto	l260
  1000  0005EC  8AF2               	bsf	intcon,5,c	;volatile
  1001  0005EE  D001               	goto	l261
  1002  0005F0                     l260:
  1003  0005F0  9AF2               	bcf	intcon,5,c	;volatile
  1004  0005F2                     l261:
  1005  0005F2  8ED5               	bsf	4053,7,c	;volatile
  1006  0005F4  0012               	return	
  1007  0005F6                     __end_of_OpenTimer0:
  1008                           	opt stack 0
  1009                           pclatu	equ	0xFFB
  1010                           pclath	equ	0xFFA
  1011                           tblptru	equ	0xFF8
  1012                           tblptrh	equ	0xFF7
  1013                           tblptrl	equ	0xFF6
  1014                           tablat	equ	0xFF5
  1015                           prodh	equ	0xFF4
  1016                           prodl	equ	0xFF3
  1017                           intcon	equ	0xFF2
  1018                           postinc0	equ	0xFEE
  1019                           fsr0h	equ	0xFEA
  1020                           fsr0l	equ	0xFE9
  1021                           wreg	equ	0xFE8
  1022                           postdec1	equ	0xFE5
  1023                           fsr1h	equ	0xFE2
  1024                           fsr1l	equ	0xFE1
  1025                           fsr2h	equ	0xFDA
  1026                           fsr2l	equ	0xFD9
  1027                           status	equ	0xFD8
  1028                           
  1029 ;; *************** function _configPorts *****************
  1030 ;; Defined at:
  1031 ;;		line 14 in file "Config.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;		None
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;		None
  1036 ;; Return value:  Size  Location     Type
  1037 ;;		None               void
  1038 ;; Registers used:
  1039 ;;		None
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1045 ;;      Params:         0       0       0       0       0       0       0       0       0
  1046 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1048 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1049 ;;Total ram usage:        0 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; Hardware stack levels required when called:    2
  1052 ;; This function calls:
  1053 ;;		Nothing
  1054 ;; This function is called by:
  1055 ;;		_main
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           	psect	text3
  1060  0005F6                     __ptext3:
  1061                           	opt stack 0
  1062  0005F6                     _configPorts:
  1063                           	opt stack 28
  1064                           
  1065                           ;Config.c: 16: INTCON2bits.NOT_RBPU = 1;
  1066                           
  1067                           ;incstack = 0
  1068  0005F6  8EF1               	bsf	intcon2,7,c	;volatile
  1069                           
  1070                           ;Config.c: 20: ADCON0bits.ADON = 0;
  1071  0005F8  90C2               	bcf	4034,0,c	;volatile
  1072                           
  1073                           ;Config.c: 21: PIE1bits.SSPIE = 0;
  1074  0005FA  969D               	bcf	3997,3,c	;volatile
  1075                           
  1076                           ;Config.c: 22: CM1CON0bits.C1ON = 0;
  1077  0005FC  9E98               	bcf	3992,7,c	;volatile
  1078                           
  1079                           ;Config.c: 24: ANSELCbits.ANSC6 = 0;
  1080  0005FE  010F               	movlb	15	; () banked
  1081  000600  9D5D               	bcf	93,6,b	;volatile
  1082                           
  1083                           ;Config.c: 25: ANSELCbits.ANSC7 = 0;
  1084  000602  010F               	movlb	15	; () banked
  1085  000604  9F5D               	bcf	93,7,b	;volatile
  1086                           
  1087                           ;Config.c: 26: ANSELBbits.ANSB3 = 0;
  1088  000606  010F               	movlb	15	; () banked
  1089  000608  975C               	bcf	92,3,b	;volatile
  1090                           
  1091                           ;Config.c: 28: TRISBbits.TRISB4 = 0;
  1092  00060A  9893               	bcf	3987,4,c	;volatile
  1093                           
  1094                           ;Config.c: 31: TRISBbits.TRISB0 = 1;
  1095  00060C  8093               	bsf	3987,0,c	;volatile
  1096                           
  1097                           ;Config.c: 32: TRISBbits.TRISB1 = 0;
  1098  00060E  9293               	bcf	3987,1,c	;volatile
  1099                           
  1100                           ;Config.c: 33: TRISBbits.TRISB2 = 0;
  1101  000610  9493               	bcf	3987,2,c	;volatile
  1102                           
  1103                           ;Config.c: 34: TRISBbits.TRISB3 = 0;
  1104  000612  9693               	bcf	3987,3,c	;volatile
  1105                           
  1106                           ; BSR set to: 15
  1107  000614  0012               	return	
  1108  000616                     __end_of_configPorts:
  1109                           	opt stack 0
  1110                           pclatu	equ	0xFFB
  1111                           pclath	equ	0xFFA
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           prodh	equ	0xFF4
  1117                           prodl	equ	0xFF3
  1118                           intcon	equ	0xFF2
  1119                           intcon2	equ	0xFF1
  1120                           postinc0	equ	0xFEE
  1121                           fsr0h	equ	0xFEA
  1122                           fsr0l	equ	0xFE9
  1123                           wreg	equ	0xFE8
  1124                           postdec1	equ	0xFE5
  1125                           fsr1h	equ	0xFE2
  1126                           fsr1l	equ	0xFE1
  1127                           fsr2h	equ	0xFDA
  1128                           fsr2l	equ	0xFD9
  1129                           status	equ	0xFD8
  1130                           
  1131 ;; *************** function _configInterruptPriority *****************
  1132 ;; Defined at:
  1133 ;;		line 37 in file "Config.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;		None
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;		None
  1138 ;; Return value:  Size  Location     Type
  1139 ;;		None               void
  1140 ;; Registers used:
  1141 ;;		None
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1147 ;;      Params:         0       0       0       0       0       0       0       0       0
  1148 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1150 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1151 ;;Total ram usage:        0 bytes
  1152 ;; Hardware stack levels used:    1
  1153 ;; Hardware stack levels required when called:    2
  1154 ;; This function calls:
  1155 ;;		Nothing
  1156 ;; This function is called by:
  1157 ;;		_main
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161                           	psect	text4
  1162  0006CC                     __ptext4:
  1163                           	opt stack 0
  1164  0006CC                     _configInterruptPriority:
  1165                           	opt stack 28
  1166                           
  1167                           ;Config.c: 38: RCONbits.IPEN = 1;
  1168                           
  1169                           ; BSR set to: 15
  1170                           ;incstack = 0
  1171  0006CC  8ED0               	bsf	4048,7,c	;volatile
  1172                           
  1173                           ;Config.c: 40: INTCONbits.GIEH = 1;
  1174  0006CE  8EF2               	bsf	intcon,7,c	;volatile
  1175                           
  1176                           ;Config.c: 41: INTCONbits.GIEL = 1;
  1177  0006D0  8CF2               	bsf	intcon,6,c	;volatile
  1178                           
  1179                           ;Config.c: 42: INTCON2bits.TMR0IP = 1;
  1180  0006D2  84F1               	bsf	intcon2,2,c	;volatile
  1181  0006D4  0012               	return	
  1182  0006D6                     __end_of_configInterruptPriority:
  1183                           	opt stack 0
  1184                           pclatu	equ	0xFFB
  1185                           pclath	equ	0xFFA
  1186                           tblptru	equ	0xFF8
  1187                           tblptrh	equ	0xFF7
  1188                           tblptrl	equ	0xFF6
  1189                           tablat	equ	0xFF5
  1190                           prodh	equ	0xFF4
  1191                           prodl	equ	0xFF3
  1192                           intcon	equ	0xFF2
  1193                           intcon2	equ	0xFF1
  1194                           postinc0	equ	0xFEE
  1195                           fsr0h	equ	0xFEA
  1196                           fsr0l	equ	0xFE9
  1197                           wreg	equ	0xFE8
  1198                           postdec1	equ	0xFE5
  1199                           fsr1h	equ	0xFE2
  1200                           fsr1l	equ	0xFE1
  1201                           fsr2h	equ	0xFDA
  1202                           fsr2l	equ	0xFD9
  1203                           status	equ	0xFD8
  1204                           
  1205 ;; *************** function _configClock *****************
  1206 ;; Defined at:
  1207 ;;		line 45 in file "Config.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;		None               void
  1214 ;; Registers used:
  1215 ;;		None
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1221 ;;      Params:         0       0       0       0       0       0       0       0       0
  1222 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1224 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1225 ;;Total ram usage:        0 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    2
  1228 ;; This function calls:
  1229 ;;		Nothing
  1230 ;; This function is called by:
  1231 ;;		_main
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text5
  1236  0006F0                     __ptext5:
  1237                           	opt stack 0
  1238  0006F0                     _configClock:
  1239                           	opt stack 28
  1240                           
  1241                           ;Config.c: 46: OSCCONbits.IDLEN = 1;
  1242                           
  1243                           ;incstack = 0
  1244  0006F0  8ED3               	bsf	4051,7,c	;volatile
  1245  0006F2  0012               	return	
  1246  0006F4                     __end_of_configClock:
  1247                           	opt stack 0
  1248                           pclatu	equ	0xFFB
  1249                           pclath	equ	0xFFA
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           prodh	equ	0xFF4
  1255                           prodl	equ	0xFF3
  1256                           intcon	equ	0xFF2
  1257                           intcon2	equ	0xFF1
  1258                           postinc0	equ	0xFEE
  1259                           fsr0h	equ	0xFEA
  1260                           fsr0l	equ	0xFE9
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1h	equ	0xFE2
  1264                           fsr1l	equ	0xFE1
  1265                           fsr2h	equ	0xFDA
  1266                           fsr2l	equ	0xFD9
  1267                           status	equ	0xFD8
  1268                           
  1269 ;; *************** function _Serial_sendFrame *****************
  1270 ;; Defined at:
  1271 ;;		line 47 in file "serial.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;  frame           2   34[COMRAM] PTR const struct serial_
  1274 ;;		 -> main@frame(5), 
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  p               2   40[COMRAM] PTR unsigned char 
  1277 ;;		 -> CyclicBitBuffer_buffer(1537), 
  1278 ;;  i               2   38[COMRAM] unsigned short 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;		None               void
  1281 ;; Registers used:
  1282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1288 ;;      Params:         2       0       0       0       0       0       0       0       0
  1289 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1290 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1291 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1292 ;;Total ram usage:        8 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; Hardware stack levels required when called:    3
  1295 ;; This function calls:
  1296 ;;		_Write1USART
  1297 ;; This function is called by:
  1298 ;;		_main
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           	psect	text6
  1303  0003B2                     __ptext6:
  1304                           	opt stack 0
  1305  0003B2                     _Serial_sendFrame:
  1306                           	opt stack 27
  1307  0003B2                     l87:
  1308  0003B2  A2AC               	btfss	4012,1,c	;volatile
  1309  0003B4  D7FE               	goto	l87
  1310                           
  1311                           ;serial.c: 52: Write1USART(0xee);
  1312  0003B6  0EEE               	movlw	238
  1313  0003B8  EC1A  F003         	call	_Write1USART
  1314  0003BC                     l90:
  1315  0003BC  A2AC               	btfss	4012,1,c	;volatile
  1316  0003BE  D7FE               	goto	l90
  1317                           
  1318                           ;serial.c: 56: Write1USART(frame->header);
  1319  0003C0  C023  FFD9         	movff	Serial_sendFrame@frame,fsr2l
  1320  0003C4  C024  FFDA         	movff	Serial_sendFrame@frame+1,fsr2h
  1321  0003C8  50DF               	movf	indf2,w,c
  1322  0003CA  EC1A  F003         	call	_Write1USART
  1323  0003CE                     l93:
  1324  0003CE  A2AC               	btfss	4012,1,c	;volatile
  1325  0003D0  D7FE               	goto	l93
  1326                           
  1327                           ;serial.c: 59: Write1USART(frame->lenght >> 8);
  1328  0003D2  EE20 F001          	lfsr	2,1
  1329  0003D6  5023               	movf	Serial_sendFrame@frame,w,c
  1330  0003D8  26D9               	addwf	fsr2l,f,c
  1331  0003DA  5024               	movf	Serial_sendFrame@frame+1,w,c
  1332  0003DC  22DA               	addwfc	fsr2h,f,c
  1333  0003DE  CFDE F025          	movff	postinc2,??_Serial_sendFrame
  1334  0003E2  CFDD F026          	movff	postdec2,??_Serial_sendFrame+1
  1335  0003E6  C026  F025         	movff	??_Serial_sendFrame+1,??_Serial_sendFrame
  1336  0003EA  6A26               	clrf	??_Serial_sendFrame+1,c
  1337  0003EC  5025               	movf	??_Serial_sendFrame,w,c
  1338  0003EE  EC1A  F003         	call	_Write1USART
  1339  0003F2                     l96:
  1340  0003F2  A2AC               	btfss	4012,1,c	;volatile
  1341  0003F4  D7FE               	goto	l96
  1342                           
  1343                           ;serial.c: 62: Write1USART(frame->lenght);
  1344  0003F6  EE20 F001          	lfsr	2,1
  1345  0003FA  5023               	movf	Serial_sendFrame@frame,w,c
  1346  0003FC  26D9               	addwf	fsr2l,f,c
  1347  0003FE  5024               	movf	Serial_sendFrame@frame+1,w,c
  1348  000400  22DA               	addwfc	fsr2h,f,c
  1349  000402  50DF               	movf	indf2,w,c
  1350  000404  EC1A  F003         	call	_Write1USART
  1351                           
  1352                           ;serial.c: 64: unsigned char * p = frame->content;
  1353  000408  EE20 F003          	lfsr	2,3
  1354  00040C  5023               	movf	Serial_sendFrame@frame,w,c
  1355  00040E  26D9               	addwf	fsr2l,f,c
  1356  000410  5024               	movf	Serial_sendFrame@frame+1,w,c
  1357  000412  22DA               	addwfc	fsr2h,f,c
  1358  000414  CFDE F029          	movff	postinc2,Serial_sendFrame@p
  1359  000418  CFDD F02A          	movff	postdec2,Serial_sendFrame@p+1
  1360                           
  1361                           ;serial.c: 66: for(i=0; i < frame->lenght ; i++, p++) {
  1362  00041C  0E00               	movlw	0
  1363  00041E  6E28               	movwf	Serial_sendFrame@i+1,c
  1364  000420  0E00               	movlw	0
  1365  000422  6E27               	movwf	Serial_sendFrame@i,c
  1366  000424  D00D               	goto	l1073
  1367  000426                     l101:
  1368  000426  A2AC               	btfss	4012,1,c	;volatile
  1369  000428  D7FE               	goto	l101
  1370                           
  1371                           ;serial.c: 69: Write1USART(*p);
  1372  00042A  C029  FFD9         	movff	Serial_sendFrame@p,fsr2l
  1373  00042E  C02A  FFDA         	movff	Serial_sendFrame@p+1,fsr2h
  1374  000432  50DF               	movf	indf2,w,c
  1375  000434  EC1A  F003         	call	_Write1USART
  1376  000438  4A27               	infsnz	Serial_sendFrame@i,f,c
  1377  00043A  2A28               	incf	Serial_sendFrame@i+1,f,c
  1378  00043C  4A29               	infsnz	Serial_sendFrame@p,f,c
  1379  00043E  2A2A               	incf	Serial_sendFrame@p+1,f,c
  1380  000440                     l1073:
  1381  000440  EE20 F001          	lfsr	2,1
  1382  000444  5023               	movf	Serial_sendFrame@frame,w,c
  1383  000446  26D9               	addwf	fsr2l,f,c
  1384  000448  5024               	movf	Serial_sendFrame@frame+1,w,c
  1385  00044A  22DA               	addwfc	fsr2h,f,c
  1386  00044C  CFDE F025          	movff	postinc2,??_Serial_sendFrame
  1387  000450  CFDD F026          	movff	postdec2,??_Serial_sendFrame+1
  1388  000454  5025               	movf	??_Serial_sendFrame,w,c
  1389  000456  5C27               	subwf	Serial_sendFrame@i,w,c
  1390  000458  5026               	movf	??_Serial_sendFrame+1,w,c
  1391  00045A  5828               	subwfb	Serial_sendFrame@i+1,w,c
  1392  00045C  B0D8               	btfsc	status,0,c
  1393  00045E  0012               	return	
  1394  000460  D7E2               	goto	l101
  1395  000462                     __end_of_Serial_sendFrame:
  1396                           	opt stack 0
  1397                           pclatu	equ	0xFFB
  1398                           pclath	equ	0xFFA
  1399                           tblptru	equ	0xFF8
  1400                           tblptrh	equ	0xFF7
  1401                           tblptrl	equ	0xFF6
  1402                           tablat	equ	0xFF5
  1403                           prodh	equ	0xFF4
  1404                           prodl	equ	0xFF3
  1405                           intcon	equ	0xFF2
  1406                           intcon2	equ	0xFF1
  1407                           postinc0	equ	0xFEE
  1408                           fsr0h	equ	0xFEA
  1409                           fsr0l	equ	0xFE9
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           indf2	equ	0xFDF
  1415                           postinc2	equ	0xFDE
  1416                           postdec2	equ	0xFDD
  1417                           fsr2h	equ	0xFDA
  1418                           fsr2l	equ	0xFD9
  1419                           status	equ	0xFD8
  1420                           
  1421 ;; *************** function _Write1USART *****************
  1422 ;; Defined at:
  1423 ;;		line 14 in file "/opt/microchip/xc8/v1.32/sources/pic18/plib/USART/u1write.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;  data            1    wreg     unsigned char 
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;  data            1   33[COMRAM] unsigned char 
  1428 ;; Return value:  Size  Location     Type
  1429 ;;		None               void
  1430 ;; Registers used:
  1431 ;;		wreg
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1437 ;;      Params:         0       0       0       0       0       0       0       0       0
  1438 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1439 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1440 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1441 ;;Total ram usage:        1 bytes
  1442 ;; Hardware stack levels used:    1
  1443 ;; Hardware stack levels required when called:    2
  1444 ;; This function calls:
  1445 ;;		Nothing
  1446 ;; This function is called by:
  1447 ;;		_Serial_sendFrame
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           	psect	text7
  1452  000634                     __ptext7:
  1453                           	opt stack 0
  1454  000634                     _Write1USART:
  1455                           	opt stack 27
  1456                           
  1457                           ;incstack = 0
  1458                           ;Write1USART@data stored from wreg
  1459  000634  6E22               	movwf	Write1USART@data,c
  1460  000636  ACAC               	btfss	4012,6,c	;volatile
  1461  000638  D003               	goto	l1001
  1462  00063A  90AC               	bcf	4012,0,c	;volatile
  1463  00063C  B240               	btfsc	_USART1_Status,1,c
  1464  00063E  80AC               	bsf	4012,0,c	;volatile
  1465  000640                     l1001:
  1466  000640  C022  FFAD         	movff	Write1USART@data,4013	;volatile
  1467  000644  0012               	return	
  1468  000646                     __end_of_Write1USART:
  1469                           	opt stack 0
  1470                           pclatu	equ	0xFFB
  1471                           pclath	equ	0xFFA
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           prodh	equ	0xFF4
  1477                           prodl	equ	0xFF3
  1478                           intcon	equ	0xFF2
  1479                           intcon2	equ	0xFF1
  1480                           postinc0	equ	0xFEE
  1481                           fsr0h	equ	0xFEA
  1482                           fsr0l	equ	0xFE9
  1483                           wreg	equ	0xFE8
  1484                           postdec1	equ	0xFE5
  1485                           fsr1h	equ	0xFE2
  1486                           fsr1l	equ	0xFE1
  1487                           indf2	equ	0xFDF
  1488                           postinc2	equ	0xFDE
  1489                           postdec2	equ	0xFDD
  1490                           fsr2h	equ	0xFDA
  1491                           fsr2l	equ	0xFD9
  1492                           status	equ	0xFD8
  1493                           
  1494 ;; *************** function _Serial_readFrame *****************
  1495 ;; Defined at:
  1496 ;;		line 12 in file "serial.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;  frame           2   34[COMRAM] PTR struct serial_frame
  1499 ;;		 -> main@frame(5), 
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  p               2   40[COMRAM] PTR unsigned char 
  1502 ;;		 -> CyclicBitBuffer_buffer(1537), 
  1503 ;;  i               2   38[COMRAM] unsigned short 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  2   34[COMRAM] int 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1513 ;;      Params:         2       0       0       0       0       0       0       0       0
  1514 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1515 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1516 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1517 ;;Total ram usage:        8 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    3
  1520 ;; This function calls:
  1521 ;;		_Read1USART
  1522 ;; This function is called by:
  1523 ;;		_main
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           	psect	text8
  1528  0001AA                     __ptext8:
  1529                           	opt stack 0
  1530  0001AA                     _Serial_readFrame:
  1531                           	opt stack 27
  1532                           
  1533                           ;serial.c: 13: unsigned short i;
  1534                           ;serial.c: 15: if(!(PIR1bits.RC1IF)) {
  1535                           
  1536                           ;incstack = 0
  1537  0001AA  BA9E               	btfsc	3998,5,c	;volatile
  1538  0001AC  D005               	goto	l1081
  1539                           
  1540                           ;serial.c: 16: return 0;
  1541  0001AE  0E00               	movlw	0
  1542  0001B0  6E24               	movwf	?_Serial_readFrame+1,c
  1543  0001B2  0E00               	movlw	0
  1544  0001B4  6E23               	movwf	?_Serial_readFrame,c
  1545  0001B6  0012               	return	
  1546  0001B8                     l1081:
  1547                           
  1548                           ;serial.c: 17: }
  1549                           ;serial.c: 19: frame->header = Read1USART();
  1550  0001B8  EC0B  F003         	call	_Read1USART	;wreg free
  1551  0001BC  C023  FFD9         	movff	Serial_readFrame@frame,fsr2l
  1552  0001C0  C024  FFDA         	movff	Serial_readFrame@frame+1,fsr2h
  1553  0001C4  6EDF               	movwf	indf2,c
  1554                           
  1555                           ;serial.c: 21: if(frame->header != 0xee) {
  1556  0001C6  C023  FFD9         	movff	Serial_readFrame@frame,fsr2l
  1557  0001CA  C024  FFDA         	movff	Serial_readFrame@frame+1,fsr2h
  1558  0001CE  50DF               	movf	indf2,w,c
  1559  0001D0  0AEE               	xorlw	238
  1560  0001D2  B4D8               	btfsc	status,2,c
  1561  0001D4  D005               	goto	l69
  1562                           
  1563                           ;serial.c: 22: return 0;
  1564  0001D6  0E00               	movlw	0
  1565  0001D8  6E24               	movwf	?_Serial_readFrame+1,c
  1566  0001DA  0E00               	movlw	0
  1567  0001DC  6E23               	movwf	?_Serial_readFrame,c
  1568  0001DE  0012               	return	
  1569  0001E0                     l69:
  1570                           
  1571                           ;serial.c: 23: }
  1572                           ;serial.c: 24: (INTCONbits.TMR0IE = 0);
  1573  0001E0  9AF2               	bcf	intcon,5,c	;volatile
  1574  0001E2                     l70:
  1575  0001E2  AA9E               	btfss	3998,5,c	;volatile
  1576  0001E4  D7FE               	goto	l70
  1577                           
  1578                           ;serial.c: 28: frame->header = Read1USART();
  1579  0001E6  EC0B  F003         	call	_Read1USART	;wreg free
  1580  0001EA  C023  FFD9         	movff	Serial_readFrame@frame,fsr2l
  1581  0001EE  C024  FFDA         	movff	Serial_readFrame@frame+1,fsr2h
  1582  0001F2  6EDF               	movwf	indf2,c
  1583  0001F4                     l73:
  1584  0001F4  AA9E               	btfss	3998,5,c	;volatile
  1585  0001F6  D7FE               	goto	l73
  1586                           
  1587                           ;serial.c: 32: frame->lenght = Read1USART();
  1588  0001F8  EC0B  F003         	call	_Read1USART	;wreg free
  1589  0001FC  6E25               	movwf	??_Serial_readFrame& (0+255),c
  1590  0001FE  6A26               	clrf	(??_Serial_readFrame+1)& (0+255),c
  1591  000200  EE20 F001          	lfsr	2,1
  1592  000204  5023               	movf	Serial_readFrame@frame,w,c
  1593  000206  26D9               	addwf	fsr2l,f,c
  1594  000208  5024               	movf	Serial_readFrame@frame+1,w,c
  1595  00020A  22DA               	addwfc	fsr2h,f,c
  1596  00020C  C025  FFDE         	movff	??_Serial_readFrame,postinc2
  1597  000210  C026  FFDD         	movff	??_Serial_readFrame+1,postdec2
  1598                           
  1599                           ;serial.c: 33: frame->lenght = frame->lenght << 8;
  1600  000214  EE20 F001          	lfsr	2,1
  1601  000218  5023               	movf	Serial_readFrame@frame,w,c
  1602  00021A  26D9               	addwf	fsr2l,f,c
  1603  00021C  5024               	movf	Serial_readFrame@frame+1,w,c
  1604  00021E  22DA               	addwfc	fsr2h,f,c
  1605  000220  CFDE F025          	movff	postinc2,??_Serial_readFrame
  1606  000224  CFDD F026          	movff	postdec2,??_Serial_readFrame+1
  1607  000228  C025  F026         	movff	??_Serial_readFrame,??_Serial_readFrame+1
  1608  00022C  6A25               	clrf	??_Serial_readFrame,c
  1609  00022E  EE20 F001          	lfsr	2,1
  1610  000232  5023               	movf	Serial_readFrame@frame,w,c
  1611  000234  26D9               	addwf	fsr2l,f,c
  1612  000236  5024               	movf	Serial_readFrame@frame+1,w,c
  1613  000238  22DA               	addwfc	fsr2h,f,c
  1614  00023A  C025  FFDE         	movff	??_Serial_readFrame,postinc2
  1615  00023E  C026  FFDD         	movff	??_Serial_readFrame+1,postdec2
  1616  000242                     l76:
  1617  000242  AA9E               	btfss	3998,5,c	;volatile
  1618  000244  D7FE               	goto	l76
  1619                           
  1620                           ;serial.c: 36: frame->lenght += Read1USART();
  1621  000246  EE20 F001          	lfsr	2,1
  1622  00024A  5023               	movf	Serial_readFrame@frame,w,c
  1623  00024C  26D9               	addwf	fsr2l,f,c
  1624  00024E  5024               	movf	Serial_readFrame@frame+1,w,c
  1625  000250  22DA               	addwfc	fsr2h,f,c
  1626  000252  EC0B  F003         	call	_Read1USART	;wreg free
  1627  000256  6E25               	movwf	??_Serial_readFrame& (0+255),c
  1628  000258  5025               	movf	??_Serial_readFrame,w,c
  1629  00025A  26DE               	addwf	postinc2,f,c
  1630  00025C  0E00               	movlw	0
  1631  00025E  22DD               	addwfc	postdec2,f,c
  1632                           
  1633                           ;serial.c: 38: unsigned char* p = frame->content;
  1634  000260  EE20 F003          	lfsr	2,3
  1635  000264  5023               	movf	Serial_readFrame@frame,w,c
  1636  000266  26D9               	addwf	fsr2l,f,c
  1637  000268  5024               	movf	Serial_readFrame@frame+1,w,c
  1638  00026A  22DA               	addwfc	fsr2h,f,c
  1639  00026C  CFDE F029          	movff	postinc2,Serial_readFrame@p
  1640  000270  CFDD F02A          	movff	postdec2,Serial_readFrame@p+1
  1641                           
  1642                           ;serial.c: 39: for(i=0; i< frame->lenght; p++,i++) {
  1643  000274  0E00               	movlw	0
  1644  000276  6E28               	movwf	Serial_readFrame@i+1,c
  1645  000278  0E00               	movlw	0
  1646  00027A  6E27               	movwf	Serial_readFrame@i,c
  1647  00027C  D00D               	goto	l1107
  1648  00027E                     l81:
  1649  00027E  AA9E               	btfss	3998,5,c	;volatile
  1650  000280  D7FE               	goto	l81
  1651                           
  1652                           ;serial.c: 42: (*p) = Read1USART();
  1653  000282  EC0B  F003         	call	_Read1USART	;wreg free
  1654  000286  C029  FFD9         	movff	Serial_readFrame@p,fsr2l
  1655  00028A  C02A  FFDA         	movff	Serial_readFrame@p+1,fsr2h
  1656  00028E  6EDF               	movwf	indf2,c
  1657  000290  4A29               	infsnz	Serial_readFrame@p,f,c
  1658  000292  2A2A               	incf	Serial_readFrame@p+1,f,c
  1659  000294  4A27               	infsnz	Serial_readFrame@i,f,c
  1660  000296  2A28               	incf	Serial_readFrame@i+1,f,c
  1661  000298                     l1107:
  1662  000298  EE20 F001          	lfsr	2,1
  1663  00029C  5023               	movf	Serial_readFrame@frame,w,c
  1664  00029E  26D9               	addwf	fsr2l,f,c
  1665  0002A0  5024               	movf	Serial_readFrame@frame+1,w,c
  1666  0002A2  22DA               	addwfc	fsr2h,f,c
  1667  0002A4  CFDE F025          	movff	postinc2,??_Serial_readFrame
  1668  0002A8  CFDD F026          	movff	postdec2,??_Serial_readFrame+1
  1669  0002AC  5025               	movf	??_Serial_readFrame,w,c
  1670  0002AE  5C27               	subwf	Serial_readFrame@i,w,c
  1671  0002B0  5026               	movf	??_Serial_readFrame+1,w,c
  1672  0002B2  5828               	subwfb	Serial_readFrame@i+1,w,c
  1673  0002B4  A0D8               	btfss	status,0,c
  1674  0002B6  D7E3               	goto	l81
  1675                           
  1676                           ;serial.c: 43: }
  1677                           ;serial.c: 44: return 1;
  1678  0002B8  0E00               	movlw	0
  1679  0002BA  6E24               	movwf	?_Serial_readFrame+1,c
  1680  0002BC  0E01               	movlw	1
  1681  0002BE  6E23               	movwf	?_Serial_readFrame,c
  1682  0002C0  0012               	return	
  1683  0002C2                     __end_of_Serial_readFrame:
  1684                           	opt stack 0
  1685                           pclatu	equ	0xFFB
  1686                           pclath	equ	0xFFA
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           prodh	equ	0xFF4
  1692                           prodl	equ	0xFF3
  1693                           intcon	equ	0xFF2
  1694                           intcon2	equ	0xFF1
  1695                           postinc0	equ	0xFEE
  1696                           fsr0h	equ	0xFEA
  1697                           fsr0l	equ	0xFE9
  1698                           wreg	equ	0xFE8
  1699                           postdec1	equ	0xFE5
  1700                           fsr1h	equ	0xFE2
  1701                           fsr1l	equ	0xFE1
  1702                           indf2	equ	0xFDF
  1703                           postinc2	equ	0xFDE
  1704                           postdec2	equ	0xFDD
  1705                           fsr2h	equ	0xFDA
  1706                           fsr2l	equ	0xFD9
  1707                           status	equ	0xFD8
  1708                           
  1709 ;; *************** function _Read1USART *****************
  1710 ;; Defined at:
  1711 ;;		line 17 in file "/opt/microchip/xc8/v1.32/sources/pic18/plib/USART/u1read.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;		None
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  data            1   33[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      unsigned char 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1725 ;;      Params:         0       0       0       0       0       0       0       0       0
  1726 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1728 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1729 ;;Total ram usage:        1 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    2
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_Serial_readFrame
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text9
  1740  000616                     __ptext9:
  1741                           	opt stack 0
  1742  000616                     _Read1USART:
  1743                           	opt stack 27
  1744                           
  1745                           ;incstack = 0
  1746  000616  0EF2               	movlw	242
  1747  000618  1640               	andwf	_USART1_Status,f,c
  1748  00061A  ACAB               	btfss	4011,6,c	;volatile
  1749  00061C  D003               	goto	l306
  1750  00061E  9040               	bcf	_USART1_Status,0,c
  1751  000620  B0AB               	btfsc	4011,0,c	;volatile
  1752  000622  8040               	bsf	_USART1_Status,0,c
  1753  000624                     l306:
  1754  000624  B4AB               	btfsc	4011,2,c	;volatile
  1755  000626  8440               	bsf	_USART1_Status,2,c
  1756  000628  B2AB               	btfsc	4011,1,c	;volatile
  1757  00062A  8640               	bsf	_USART1_Status,3,c
  1758  00062C  CFAE F022          	movff	4014,Read1USART@data	;volatile
  1759  000630  5022               	movf	Read1USART@data,w,c
  1760  000632  0012               	return	
  1761  000634                     __end_of_Read1USART:
  1762                           	opt stack 0
  1763                           pclatu	equ	0xFFB
  1764                           pclath	equ	0xFFA
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           prodh	equ	0xFF4
  1770                           prodl	equ	0xFF3
  1771                           intcon	equ	0xFF2
  1772                           intcon2	equ	0xFF1
  1773                           postinc0	equ	0xFEE
  1774                           fsr0h	equ	0xFEA
  1775                           fsr0l	equ	0xFE9
  1776                           wreg	equ	0xFE8
  1777                           postdec1	equ	0xFE5
  1778                           fsr1h	equ	0xFE2
  1779                           fsr1l	equ	0xFE1
  1780                           indf2	equ	0xFDF
  1781                           postinc2	equ	0xFDE
  1782                           postdec2	equ	0xFDD
  1783                           fsr2h	equ	0xFDA
  1784                           fsr2l	equ	0xFD9
  1785                           status	equ	0xFD8
  1786                           
  1787 ;; *************** function _Serial_configSerialPort *****************
  1788 ;; Defined at:
  1789 ;;		line 6 in file "serial.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;		None
  1794 ;; Return value:  Size  Location     Type
  1795 ;;		None               void
  1796 ;; Registers used:
  1797 ;;		wreg, status,2, cstack
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1803 ;;      Params:         0       0       0       0       0       0       0       0       0
  1804 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1805 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1806 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1807 ;;Total ram usage:        0 bytes
  1808 ;; Hardware stack levels used:    1
  1809 ;; Hardware stack levels required when called:    3
  1810 ;; This function calls:
  1811 ;;		_Open1USART
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text10
  1818  000658                     __ptext10:
  1819                           	opt stack 0
  1820  000658                     _Serial_configSerialPort:
  1821                           	opt stack 27
  1822                           
  1823                           ;serial.c: 7: Open1USART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111,
  1824                           ;serial.c: 8: 16);
  1825                           
  1826                           ;incstack = 0
  1827  000658  0E00               	movlw	0
  1828  00065A  6E23               	movwf	Open1USART@spbrg+1,c
  1829  00065C  0E10               	movlw	16
  1830  00065E  6E22               	movwf	Open1USART@spbrg,c
  1831  000660  0E3C               	movlw	60
  1832  000662  EC31  F002         	call	_Open1USART
  1833  000666  0012               	return	
  1834  000668                     __end_of_Serial_configSerialPort:
  1835                           	opt stack 0
  1836                           pclatu	equ	0xFFB
  1837                           pclath	equ	0xFFA
  1838                           tblptru	equ	0xFF8
  1839                           tblptrh	equ	0xFF7
  1840                           tblptrl	equ	0xFF6
  1841                           tablat	equ	0xFF5
  1842                           prodh	equ	0xFF4
  1843                           prodl	equ	0xFF3
  1844                           intcon	equ	0xFF2
  1845                           intcon2	equ	0xFF1
  1846                           postinc0	equ	0xFEE
  1847                           fsr0h	equ	0xFEA
  1848                           fsr0l	equ	0xFE9
  1849                           wreg	equ	0xFE8
  1850                           postdec1	equ	0xFE5
  1851                           fsr1h	equ	0xFE2
  1852                           fsr1l	equ	0xFE1
  1853                           indf2	equ	0xFDF
  1854                           postinc2	equ	0xFDE
  1855                           postdec2	equ	0xFDD
  1856                           fsr2h	equ	0xFDA
  1857                           fsr2l	equ	0xFD9
  1858                           status	equ	0xFD8
  1859                           
  1860 ;; *************** function _Open1USART *****************
  1861 ;; Defined at:
  1862 ;;		line 124 in file "/opt/microchip/xc8/v1.32/sources/pic18/plib/USART/u1open.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;  config          1    wreg     unsigned char 
  1865 ;;  spbrg           2   33[COMRAM] unsigned int 
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;  config          1   38[COMRAM] unsigned char 
  1868 ;; Return value:  Size  Location     Type
  1869 ;;		None               void
  1870 ;; Registers used:
  1871 ;;		wreg, status,2
  1872 ;; Tracked objects:
  1873 ;;		On entry : 0/0
  1874 ;;		On exit  : 0/0
  1875 ;;		Unchanged: 0/0
  1876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1877 ;;      Params:         2       0       0       0       0       0       0       0       0
  1878 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1879 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1880 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1881 ;;Total ram usage:        6 bytes
  1882 ;; Hardware stack levels used:    1
  1883 ;; Hardware stack levels required when called:    2
  1884 ;; This function calls:
  1885 ;;		Nothing
  1886 ;; This function is called by:
  1887 ;;		_Serial_configSerialPort
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           	psect	text11
  1892  000462                     __ptext11:
  1893                           	opt stack 0
  1894  000462                     _Open1USART:
  1895                           	opt stack 27
  1896                           
  1897                           ;incstack = 0
  1898                           ;Open1USART@config stored from wreg
  1899  000462  6E27               	movwf	Open1USART@config,c
  1900  000464  0E00               	movlw	0
  1901  000466  6EAC               	movwf	4012,c	;volatile
  1902  000468  0E00               	movlw	0
  1903  00046A  6EAB               	movwf	4011,c	;volatile
  1904  00046C  B027               	btfsc	Open1USART@config,0,c
  1905  00046E  88AC               	bsf	4012,4,c	;volatile
  1906  000470  A227               	btfss	Open1USART@config,1,c
  1907  000472  D002               	goto	l949
  1908  000474  8CAC               	bsf	4012,6,c	;volatile
  1909  000476  8CAB               	bsf	4011,6,c	;volatile
  1910  000478                     l949:
  1911  000478  B427               	btfsc	Open1USART@config,2,c
  1912  00047A  8EAC               	bsf	4012,7,c	;volatile
  1913  00047C  A627               	btfss	Open1USART@config,3,c
  1914  00047E  D002               	goto	l289
  1915  000480  88AB               	bsf	4011,4,c	;volatile
  1916  000482  D001               	goto	l957
  1917  000484                     l289:
  1918  000484  8AAB               	bsf	4011,5,c	;volatile
  1919  000486                     l957:
  1920  000486  B827               	btfsc	Open1USART@config,4,c
  1921  000488  84AC               	bsf	4012,2,c	;volatile
  1922  00048A  BA27               	btfsc	Open1USART@config,5,c
  1923  00048C  86AB               	bsf	4011,3,c	;volatile
  1924  00048E  AC27               	btfss	Open1USART@config,6,c
  1925  000490  D002               	goto	l293
  1926  000492  8A9D               	bsf	3997,5,c	;volatile
  1927  000494  D001               	goto	l969
  1928  000496                     l293:
  1929  000496  9A9D               	bcf	3997,5,c	;volatile
  1930  000498                     l969:
  1931  000498  AE27               	btfss	Open1USART@config,7,c
  1932  00049A  D002               	goto	l295
  1933  00049C  889D               	bsf	3997,4,c	;volatile
  1934  00049E  D001               	goto	l296
  1935  0004A0                     l295:
  1936  0004A0  989D               	bcf	3997,4,c	;volatile
  1937  0004A2                     l296:
  1938  0004A2  C022  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  1939  0004A6  C023  F024         	movff	Open1USART@spbrg+1,??_Open1USART
  1940  0004AA  C024  F025         	movff	??_Open1USART,??_Open1USART+1
  1941  0004AE  6A26               	clrf	(??_Open1USART+2)& (0+255),c
  1942  0004B0  5025               	movf	??_Open1USART+1,w,c
  1943  0004B2  6EB0               	movwf	4016,c	;volatile
  1944  0004B4  8AAC               	bsf	4012,5,c	;volatile
  1945  0004B6  8EAB               	bsf	4011,7,c	;volatile
  1946  0004B8  0012               	return	
  1947  0004BA                     __end_of_Open1USART:
  1948                           	opt stack 0
  1949                           pclatu	equ	0xFFB
  1950                           pclath	equ	0xFFA
  1951                           tblptru	equ	0xFF8
  1952                           tblptrh	equ	0xFF7
  1953                           tblptrl	equ	0xFF6
  1954                           tablat	equ	0xFF5
  1955                           prodh	equ	0xFF4
  1956                           prodl	equ	0xFF3
  1957                           intcon	equ	0xFF2
  1958                           intcon2	equ	0xFF1
  1959                           postinc0	equ	0xFEE
  1960                           fsr0h	equ	0xFEA
  1961                           fsr0l	equ	0xFE9
  1962                           wreg	equ	0xFE8
  1963                           postdec1	equ	0xFE5
  1964                           fsr1h	equ	0xFE2
  1965                           fsr1l	equ	0xFE1
  1966                           indf2	equ	0xFDF
  1967                           postinc2	equ	0xFDE
  1968                           postdec2	equ	0xFDD
  1969                           fsr2h	equ	0xFDA
  1970                           fsr2l	equ	0xFD9
  1971                           status	equ	0xFD8
  1972                           
  1973 ;; *************** function _RF433_transmit *****************
  1974 ;; Defined at:
  1975 ;;		line 21 in file "RF433.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;		None
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;		None               void
  1982 ;; Registers used:
  1983 ;;		wreg, status,2, status,0, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1989 ;;      Params:         0       0       0       0       0       0       0       0       0
  1990 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1991 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1992 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1993 ;;Total ram usage:        0 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    3
  1996 ;; This function calls:
  1997 ;;		_CyclicBitBuffer_resetRead
  1998 ;;		_Delay100TCYx
  1999 ;;		_Delay1KTCYx
  2000 ;; This function is called by:
  2001 ;;		_main
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           	psect	text12
  2006  000552                     __ptext12:
  2007                           	opt stack 0
  2008  000552                     _RF433_transmit:
  2009                           	opt stack 27
  2010                           
  2011                           ;RF433.c: 23: LATBbits.LATB2 = 1;
  2012                           
  2013                           ;incstack = 0
  2014  000552  848A               	bsf	3978,2,c	;volatile
  2015                           
  2016                           ;RF433.c: 24: ( Delay1KTCYx( (unsigned char) 192));
  2017  000554  0EC0               	movlw	192
  2018  000556  EC34  F003         	call	_Delay1KTCYx
  2019                           
  2020                           ;RF433.c: 26: CyclicBitBuffer_resetRead();
  2021  00055A  EC52  F003         	call	_CyclicBitBuffer_resetRead	;wreg free
  2022                           
  2023                           ;RF433.c: 27: CyclicBitBuffer_flags.transmit = 1;
  2024  00055E  863F               	bsf	_CyclicBitBuffer_flags,3,c
  2025                           
  2026                           ;RF433.c: 28: LATBbits.LATB3 = 0;
  2027  000560  968A               	bcf	3978,3,c	;volatile
  2028                           
  2029                           ;RF433.c: 29: (INTCONbits.TMR0IE = 1);
  2030  000562  8AF2               	bsf	intcon,5,c	;volatile
  2031  000564                     l166:
  2032  000564  B63F               	btfsc	_CyclicBitBuffer_flags,3,c
  2033  000566  D7FE               	goto	l166
  2034                           
  2035                           ;RF433.c: 34: LATBbits.LATB3 = 0;
  2036  000568  968A               	bcf	3978,3,c	;volatile
  2037                           
  2038                           ;RF433.c: 37: LATBbits.LATB2 = 0;
  2039  00056A  948A               	bcf	3978,2,c	;volatile
  2040                           
  2041                           ;RF433.c: 38: ( Delay100TCYx((unsigned char) 192 ));
  2042  00056C  0EC0               	movlw	192
  2043  00056E  EC3C  F003         	call	_Delay100TCYx
  2044                           
  2045                           ;RF433.c: 39: LATBbits.LATB1 = 0;
  2046  000572  928A               	bcf	3978,1,c	;volatile
  2047                           
  2048                           ;RF433.c: 40: ( Delay100TCYx((unsigned char) 192 ));
  2049  000574  0EC0               	movlw	192
  2050  000576  EC3C  F003         	call	_Delay100TCYx
  2051                           
  2052                           ;RF433.c: 41: LATBbits.LATB1 = 1;
  2053  00057A  828A               	bsf	3978,1,c	;volatile
  2054                           
  2055                           ;RF433.c: 42: ( Delay1KTCYx( (unsigned char) 96));
  2056  00057C  0E60               	movlw	96
  2057  00057E  EC34  F003         	call	_Delay1KTCYx
  2058  000582  0012               	return	
  2059  000584                     __end_of_RF433_transmit:
  2060                           	opt stack 0
  2061                           pclatu	equ	0xFFB
  2062                           pclath	equ	0xFFA
  2063                           tblptru	equ	0xFF8
  2064                           tblptrh	equ	0xFF7
  2065                           tblptrl	equ	0xFF6
  2066                           tablat	equ	0xFF5
  2067                           prodh	equ	0xFF4
  2068                           prodl	equ	0xFF3
  2069                           intcon	equ	0xFF2
  2070                           intcon2	equ	0xFF1
  2071                           postinc0	equ	0xFEE
  2072                           fsr0h	equ	0xFEA
  2073                           fsr0l	equ	0xFE9
  2074                           wreg	equ	0xFE8
  2075                           postdec1	equ	0xFE5
  2076                           fsr1h	equ	0xFE2
  2077                           fsr1l	equ	0xFE1
  2078                           indf2	equ	0xFDF
  2079                           postinc2	equ	0xFDE
  2080                           postdec2	equ	0xFDD
  2081                           fsr2h	equ	0xFDA
  2082                           fsr2l	equ	0xFD9
  2083                           status	equ	0xFD8
  2084                           
  2085 ;; *************** function _RF433_receive *****************
  2086 ;; Defined at:
  2087 ;;		line 45 in file "RF433.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  bufferLength    2   33[COMRAM] PTR unsigned short 
  2090 ;;		 -> main@frame(5), 
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  2   33[COMRAM] PTR unsigned char 
  2095 ;; Registers used:
  2096 ;;		wreg, status,2, status,0, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2102 ;;      Params:         2       0       0       0       0       0       0       0       0
  2103 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2105 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2106 ;;Total ram usage:        2 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    4
  2109 ;; This function calls:
  2110 ;;		_CyclicBitBuffer_reset
  2111 ;; This function is called by:
  2112 ;;		_main
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text13
  2117  0006C0                     __ptext13:
  2118                           	opt stack 0
  2119  0006C0                     _RF433_receive:
  2120                           	opt stack 26
  2121                           
  2122                           ;RF433.c: 47: CyclicBitBuffer_reset();
  2123                           
  2124                           ;incstack = 0
  2125  0006C0  EC6B  F003         	call	_CyclicBitBuffer_reset	;wreg free
  2126                           
  2127                           ;RF433.c: 48: CyclicBitBuffer_flags.record = 1;
  2128  0006C4  823F               	bsf	_CyclicBitBuffer_flags,1,c
  2129                           
  2130                           ;RF433.c: 49: LATBbits.LATB3 = 0;
  2131  0006C6  968A               	bcf	3978,3,c	;volatile
  2132                           
  2133                           ;RF433.c: 50: (INTCONbits.TMR0IE = 1);
  2134  0006C8  8AF2               	bsf	intcon,5,c	;volatile
  2135  0006CA  0012               	return	
  2136  0006CC                     __end_of_RF433_receive:
  2137                           	opt stack 0
  2138                           pclatu	equ	0xFFB
  2139                           pclath	equ	0xFFA
  2140                           tblptru	equ	0xFF8
  2141                           tblptrh	equ	0xFF7
  2142                           tblptrl	equ	0xFF6
  2143                           tablat	equ	0xFF5
  2144                           prodh	equ	0xFF4
  2145                           prodl	equ	0xFF3
  2146                           intcon	equ	0xFF2
  2147                           intcon2	equ	0xFF1
  2148                           postinc0	equ	0xFEE
  2149                           fsr0h	equ	0xFEA
  2150                           fsr0l	equ	0xFE9
  2151                           wreg	equ	0xFE8
  2152                           postdec1	equ	0xFE5
  2153                           fsr1h	equ	0xFE2
  2154                           fsr1l	equ	0xFE1
  2155                           indf2	equ	0xFDF
  2156                           postinc2	equ	0xFDE
  2157                           postdec2	equ	0xFDD
  2158                           fsr2h	equ	0xFDA
  2159                           fsr2l	equ	0xFD9
  2160                           status	equ	0xFD8
  2161                           
  2162 ;; *************** function _CyclicBitBuffer_reset *****************
  2163 ;; Defined at:
  2164 ;;		line 26 in file "CyclicBitBuffer.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;		None
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;		None
  2169 ;; Return value:  Size  Location     Type
  2170 ;;		None               void
  2171 ;; Registers used:
  2172 ;;		wreg, status,2, status,0, cstack
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2178 ;;      Params:         0       0       0       0       0       0       0       0       0
  2179 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2180 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2181 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2182 ;;Total ram usage:        0 bytes
  2183 ;; Hardware stack levels used:    1
  2184 ;; Hardware stack levels required when called:    3
  2185 ;; This function calls:
  2186 ;;		_CyclicBitBuffer_resetRead
  2187 ;;		_CyclicBitBuffer_resetWrite
  2188 ;; This function is called by:
  2189 ;;		_main
  2190 ;;		_RF433_receive
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text14
  2195  0006D6                     __ptext14:
  2196                           	opt stack 0
  2197  0006D6                     _CyclicBitBuffer_reset:
  2198                           	opt stack 26
  2199                           
  2200                           ;CyclicBitBuffer.c: 27: CyclicBitBuffer_resetRead();
  2201                           
  2202                           ;incstack = 0
  2203  0006D6  EC52  F003         	call	_CyclicBitBuffer_resetRead	;wreg free
  2204                           
  2205                           ;CyclicBitBuffer.c: 28: CyclicBitBuffer_resetWrite();
  2206  0006DA  EC4B  F003         	call	_CyclicBitBuffer_resetWrite	;wreg free
  2207  0006DE  0012               	return	
  2208  0006E0                     __end_of_CyclicBitBuffer_reset:
  2209                           	opt stack 0
  2210                           pclatu	equ	0xFFB
  2211                           pclath	equ	0xFFA
  2212                           tblptru	equ	0xFF8
  2213                           tblptrh	equ	0xFF7
  2214                           tblptrl	equ	0xFF6
  2215                           tablat	equ	0xFF5
  2216                           prodh	equ	0xFF4
  2217                           prodl	equ	0xFF3
  2218                           intcon	equ	0xFF2
  2219                           intcon2	equ	0xFF1
  2220                           postinc0	equ	0xFEE
  2221                           fsr0h	equ	0xFEA
  2222                           fsr0l	equ	0xFE9
  2223                           wreg	equ	0xFE8
  2224                           postdec1	equ	0xFE5
  2225                           fsr1h	equ	0xFE2
  2226                           fsr1l	equ	0xFE1
  2227                           indf2	equ	0xFDF
  2228                           postinc2	equ	0xFDE
  2229                           postdec2	equ	0xFDD
  2230                           fsr2h	equ	0xFDA
  2231                           fsr2l	equ	0xFD9
  2232                           status	equ	0xFD8
  2233                           
  2234 ;; *************** function _CyclicBitBuffer_resetWrite *****************
  2235 ;; Defined at:
  2236 ;;		line 21 in file "CyclicBitBuffer.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;		None               void
  2243 ;; Registers used:
  2244 ;;		wreg, status,2, status,0
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2250 ;;      Params:         0       0       0       0       0       0       0       0       0
  2251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2253 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2254 ;;Total ram usage:        0 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    2
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_CyclicBitBuffer_reset
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           	psect	text15
  2265  000696                     __ptext15:
  2266                           	opt stack 0
  2267  000696                     _CyclicBitBuffer_resetWrite:
  2268                           	opt stack 26
  2269                           
  2270                           ;CyclicBitBuffer.c: 22: writeBitIndex = 1;
  2271                           
  2272                           ;incstack = 0
  2273  000696  0E01               	movlw	1
  2274  000698  6E44               	movwf	_writeBitIndex,c
  2275                           
  2276                           ;CyclicBitBuffer.c: 23: writeByteIndex = CyclicBitBuffer_buffer;
  2277  00069A  0E01               	movlw	high _CyclicBitBuffer_buffer
  2278  00069C  6E3E               	movwf	_writeByteIndex+1,c
  2279  00069E  0EFF               	movlw	low _CyclicBitBuffer_buffer
  2280  0006A0  6E3D               	movwf	_writeByteIndex,c
  2281  0006A2  0012               	return	
  2282  0006A4                     __end_of_CyclicBitBuffer_resetWrite:
  2283                           	opt stack 0
  2284                           pclatu	equ	0xFFB
  2285                           pclath	equ	0xFFA
  2286                           tblptru	equ	0xFF8
  2287                           tblptrh	equ	0xFF7
  2288                           tblptrl	equ	0xFF6
  2289                           tablat	equ	0xFF5
  2290                           prodh	equ	0xFF4
  2291                           prodl	equ	0xFF3
  2292                           intcon	equ	0xFF2
  2293                           intcon2	equ	0xFF1
  2294                           postinc0	equ	0xFEE
  2295                           fsr0h	equ	0xFEA
  2296                           fsr0l	equ	0xFE9
  2297                           wreg	equ	0xFE8
  2298                           postdec1	equ	0xFE5
  2299                           fsr1h	equ	0xFE2
  2300                           fsr1l	equ	0xFE1
  2301                           indf2	equ	0xFDF
  2302                           postinc2	equ	0xFDE
  2303                           postdec2	equ	0xFDD
  2304                           fsr2h	equ	0xFDA
  2305                           fsr2l	equ	0xFD9
  2306                           status	equ	0xFD8
  2307                           
  2308 ;; *************** function _CyclicBitBuffer_resetRead *****************
  2309 ;; Defined at:
  2310 ;;		line 16 in file "CyclicBitBuffer.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;		None
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;		None
  2315 ;; Return value:  Size  Location     Type
  2316 ;;		None               void
  2317 ;; Registers used:
  2318 ;;		wreg, status,2, status,0
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2324 ;;      Params:         0       0       0       0       0       0       0       0       0
  2325 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2326 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2327 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2328 ;;Total ram usage:        0 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:    2
  2331 ;; This function calls:
  2332 ;;		Nothing
  2333 ;; This function is called by:
  2334 ;;		_CyclicBitBuffer_reset
  2335 ;;		_RF433_transmit
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text16
  2340  0006A4                     __ptext16:
  2341                           	opt stack 0
  2342  0006A4                     _CyclicBitBuffer_resetRead:
  2343                           	opt stack 27
  2344                           
  2345                           ;CyclicBitBuffer.c: 17: readBitIndex = 1;
  2346                           
  2347                           ;incstack = 0
  2348  0006A4  0E01               	movlw	1
  2349  0006A6  6E43               	movwf	_readBitIndex,c
  2350                           
  2351                           ;CyclicBitBuffer.c: 18: readByteIndex = CyclicBitBuffer_buffer;
  2352  0006A8  0E01               	movlw	high _CyclicBitBuffer_buffer
  2353  0006AA  6E3A               	movwf	_readByteIndex+1,c
  2354  0006AC  0EFF               	movlw	low _CyclicBitBuffer_buffer
  2355  0006AE  6E39               	movwf	_readByteIndex,c
  2356  0006B0  0012               	return	
  2357  0006B2                     __end_of_CyclicBitBuffer_resetRead:
  2358                           	opt stack 0
  2359                           pclatu	equ	0xFFB
  2360                           pclath	equ	0xFFA
  2361                           tblptru	equ	0xFF8
  2362                           tblptrh	equ	0xFF7
  2363                           tblptrl	equ	0xFF6
  2364                           tablat	equ	0xFF5
  2365                           prodh	equ	0xFF4
  2366                           prodl	equ	0xFF3
  2367                           intcon	equ	0xFF2
  2368                           intcon2	equ	0xFF1
  2369                           postinc0	equ	0xFEE
  2370                           fsr0h	equ	0xFEA
  2371                           fsr0l	equ	0xFE9
  2372                           wreg	equ	0xFE8
  2373                           postdec1	equ	0xFE5
  2374                           fsr1h	equ	0xFE2
  2375                           fsr1l	equ	0xFE1
  2376                           indf2	equ	0xFDF
  2377                           postinc2	equ	0xFDE
  2378                           postdec2	equ	0xFDD
  2379                           fsr2h	equ	0xFDA
  2380                           fsr2l	equ	0xFD9
  2381                           status	equ	0xFD8
  2382                           
  2383 ;; *************** function _RF433_init *****************
  2384 ;; Defined at:
  2385 ;;		line 5 in file "RF433.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;		None
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;		None
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  2   14[COMRAM] int 
  2392 ;; Registers used:
  2393 ;;		wreg, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2399 ;;      Params:         0       0       0       0       0       0       0       0       0
  2400 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2401 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2402 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2403 ;;Total ram usage:        0 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    3
  2406 ;; This function calls:
  2407 ;;		_Delay100TCYx
  2408 ;;		_Delay1KTCYx
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text17
  2415  000584                     __ptext17:
  2416                           	opt stack 0
  2417  000584                     _RF433_init:
  2418                           	opt stack 27
  2419                           
  2420                           ;RF433.c: 6: LATBbits.LATB3 = 0;
  2421                           
  2422                           ;incstack = 0
  2423  000584  968A               	bcf	3978,3,c	;volatile
  2424                           
  2425                           ;RF433.c: 8: LATBbits.LATB1 = 1;
  2426  000586  828A               	bsf	3978,1,c	;volatile
  2427                           
  2428                           ;RF433.c: 9: ( Delay100TCYx( (unsigned char) 96));
  2429  000588  0E60               	movlw	96
  2430  00058A  EC3C  F003         	call	_Delay100TCYx
  2431                           
  2432                           ;RF433.c: 10: LATBbits.LATB2 = 1;
  2433  00058E  848A               	bsf	3978,2,c	;volatile
  2434                           
  2435                           ;RF433.c: 11: ( Delay1KTCYx( (unsigned char) 96));
  2436  000590  0E60               	movlw	96
  2437  000592  EC34  F003         	call	_Delay1KTCYx
  2438                           
  2439                           ;RF433.c: 12: LATBbits.LATB2 = 0;
  2440  000596  948A               	bcf	3978,2,c	;volatile
  2441                           
  2442                           ;RF433.c: 13: ( Delay100TCYx((unsigned char) 192 ));
  2443  000598  0EC0               	movlw	192
  2444  00059A  EC3C  F003         	call	_Delay100TCYx
  2445                           
  2446                           ;RF433.c: 14: LATBbits.LATB1 = 0;
  2447  00059E  928A               	bcf	3978,1,c	;volatile
  2448                           
  2449                           ;RF433.c: 15: ( Delay1KTCYx( (unsigned char) 96));
  2450  0005A0  0E60               	movlw	96
  2451  0005A2  EC34  F003         	call	_Delay1KTCYx
  2452                           
  2453                           ;RF433.c: 16: LATBbits.LATB1 = 1;
  2454  0005A6  828A               	bsf	3978,1,c	;volatile
  2455                           
  2456                           ;RF433.c: 17: ( Delay1KTCYx( (unsigned char) 96));
  2457  0005A8  0E60               	movlw	96
  2458  0005AA  EC34  F003         	call	_Delay1KTCYx
  2459  0005AE  0012               	return	
  2460  0005B0                     __end_of_RF433_init:
  2461                           	opt stack 0
  2462                           pclatu	equ	0xFFB
  2463                           pclath	equ	0xFFA
  2464                           tblptru	equ	0xFF8
  2465                           tblptrh	equ	0xFF7
  2466                           tblptrl	equ	0xFF6
  2467                           tablat	equ	0xFF5
  2468                           prodh	equ	0xFF4
  2469                           prodl	equ	0xFF3
  2470                           intcon	equ	0xFF2
  2471                           intcon2	equ	0xFF1
  2472                           postinc0	equ	0xFEE
  2473                           fsr0h	equ	0xFEA
  2474                           fsr0l	equ	0xFE9
  2475                           wreg	equ	0xFE8
  2476                           postdec1	equ	0xFE5
  2477                           fsr1h	equ	0xFE2
  2478                           fsr1l	equ	0xFE1
  2479                           indf2	equ	0xFDF
  2480                           postinc2	equ	0xFDE
  2481                           postdec2	equ	0xFDD
  2482                           fsr2h	equ	0xFDA
  2483                           fsr2l	equ	0xFD9
  2484                           status	equ	0xFD8
  2485                           
  2486 ;; *************** function _Delay1KTCYx *****************
  2487 ;; Defined at:
  2488 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/pic18/d1ktcyx.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;  unit            1    wreg     unsigned char 
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;  unit            1   33[COMRAM] unsigned char 
  2493 ;; Return value:  Size  Location     Type
  2494 ;;		None               void
  2495 ;; Registers used:
  2496 ;;		wreg
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2502 ;;      Params:         0       0       0       0       0       0       0       0       0
  2503 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2504 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2505 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2506 ;;Total ram usage:        1 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    2
  2509 ;; This function calls:
  2510 ;;		Nothing
  2511 ;; This function is called by:
  2512 ;;		_RF433_init
  2513 ;;		_RF433_transmit
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text18
  2518  000668                     __ptext18:
  2519                           	opt stack 0
  2520  000668                     _Delay1KTCYx:
  2521                           	opt stack 27
  2522                           
  2523                           ;incstack = 0
  2524                           ;Delay1KTCYx@unit stored from wreg
  2525  000668  6E22               	movwf	Delay1KTCYx@unit,c
  2526  00066A                     l554:
  2527  00066A  0EFA               	movlw	250
  2528  00066C                     u487:
  2529  00066C  F000               	nop	
  2530  00066E  2EE8               	decfsz	wreg,f,c
  2531  000670  D7FD               	goto	u487
  2532  000672  2E22               	decfsz	Delay1KTCYx@unit,f,c
  2533  000674  D7FA               	goto	l554
  2534  000676  0012               	return	
  2535  000678                     __end_of_Delay1KTCYx:
  2536                           	opt stack 0
  2537                           pclatu	equ	0xFFB
  2538                           pclath	equ	0xFFA
  2539                           tblptru	equ	0xFF8
  2540                           tblptrh	equ	0xFF7
  2541                           tblptrl	equ	0xFF6
  2542                           tablat	equ	0xFF5
  2543                           prodh	equ	0xFF4
  2544                           prodl	equ	0xFF3
  2545                           intcon	equ	0xFF2
  2546                           intcon2	equ	0xFF1
  2547                           postinc0	equ	0xFEE
  2548                           fsr0h	equ	0xFEA
  2549                           fsr0l	equ	0xFE9
  2550                           wreg	equ	0xFE8
  2551                           postdec1	equ	0xFE5
  2552                           fsr1h	equ	0xFE2
  2553                           fsr1l	equ	0xFE1
  2554                           indf2	equ	0xFDF
  2555                           postinc2	equ	0xFDE
  2556                           postdec2	equ	0xFDD
  2557                           fsr2h	equ	0xFDA
  2558                           fsr2l	equ	0xFD9
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _Delay100TCYx *****************
  2562 ;; Defined at:
  2563 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/pic18/d100tcyx.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  unit            1    wreg     unsigned char 
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;  unit            1   33[COMRAM] unsigned char 
  2568 ;; Return value:  Size  Location     Type
  2569 ;;		None               void
  2570 ;; Registers used:
  2571 ;;		wreg
  2572 ;; Tracked objects:
  2573 ;;		On entry : 0/0
  2574 ;;		On exit  : 0/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2577 ;;      Params:         0       0       0       0       0       0       0       0       0
  2578 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2579 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2580 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2581 ;;Total ram usage:        1 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    2
  2584 ;; This function calls:
  2585 ;;		Nothing
  2586 ;; This function is called by:
  2587 ;;		_RF433_init
  2588 ;;		_RF433_transmit
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           	psect	text19
  2593  000678                     __ptext19:
  2594                           	opt stack 0
  2595  000678                     _Delay100TCYx:
  2596                           	opt stack 27
  2597                           
  2598                           ;incstack = 0
  2599                           ;Delay100TCYx@unit stored from wreg
  2600  000678  6E22               	movwf	Delay100TCYx@unit,c
  2601  00067A                     l547:
  2602  00067A  0E21               	movlw	33
  2603  00067C                     u497:
  2604  00067C  2EE8               	decfsz	wreg,f,c
  2605  00067E  D7FE               	goto	u497
  2606  000680  F000               	nop	
  2607  000682  2E22               	decfsz	Delay100TCYx@unit,f,c
  2608  000684  D7FA               	goto	l547
  2609  000686  0012               	return	
  2610  000688                     __end_of_Delay100TCYx:
  2611                           	opt stack 0
  2612                           pclatu	equ	0xFFB
  2613                           pclath	equ	0xFFA
  2614                           tblptru	equ	0xFF8
  2615                           tblptrh	equ	0xFF7
  2616                           tblptrl	equ	0xFF6
  2617                           tablat	equ	0xFF5
  2618                           prodh	equ	0xFF4
  2619                           prodl	equ	0xFF3
  2620                           intcon	equ	0xFF2
  2621                           intcon2	equ	0xFF1
  2622                           postinc0	equ	0xFEE
  2623                           fsr0h	equ	0xFEA
  2624                           fsr0l	equ	0xFE9
  2625                           wreg	equ	0xFE8
  2626                           postdec1	equ	0xFE5
  2627                           fsr1h	equ	0xFE2
  2628                           fsr1l	equ	0xFE1
  2629                           indf2	equ	0xFDF
  2630                           postinc2	equ	0xFDE
  2631                           postdec2	equ	0xFDD
  2632                           fsr2h	equ	0xFDA
  2633                           fsr2l	equ	0xFD9
  2634                           status	equ	0xFD8
  2635                           
  2636 ;; *************** function _CyclicBitBuffer_getBuffer *****************
  2637 ;; Defined at:
  2638 ;;		line 12 in file "CyclicBitBuffer.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;		None
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;		None
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  2   33[COMRAM] PTR unsigned char 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2652 ;;      Params:         2       0       0       0       0       0       0       0       0
  2653 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2655 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2656 ;;Total ram usage:        2 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    2
  2659 ;; This function calls:
  2660 ;;		Nothing
  2661 ;; This function is called by:
  2662 ;;		_main
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text20
  2667  0006E0                     __ptext20:
  2668                           	opt stack 0
  2669  0006E0                     _CyclicBitBuffer_getBuffer:
  2670                           	opt stack 28
  2671                           
  2672                           ;CyclicBitBuffer.c: 13: return CyclicBitBuffer_buffer;
  2673                           
  2674                           ;incstack = 0
  2675  0006E0  0E01               	movlw	high _CyclicBitBuffer_buffer
  2676  0006E2  6E23               	movwf	?_CyclicBitBuffer_getBuffer+1,c
  2677  0006E4  0EFF               	movlw	low _CyclicBitBuffer_buffer
  2678  0006E6  6E22               	movwf	?_CyclicBitBuffer_getBuffer,c
  2679  0006E8  0012               	return	
  2680  0006EA                     __end_of_CyclicBitBuffer_getBuffer:
  2681                           	opt stack 0
  2682                           pclatu	equ	0xFFB
  2683                           pclath	equ	0xFFA
  2684                           tblptru	equ	0xFF8
  2685                           tblptrh	equ	0xFF7
  2686                           tblptrl	equ	0xFF6
  2687                           tablat	equ	0xFF5
  2688                           prodh	equ	0xFF4
  2689                           prodl	equ	0xFF3
  2690                           intcon	equ	0xFF2
  2691                           intcon2	equ	0xFF1
  2692                           postinc0	equ	0xFEE
  2693                           fsr0h	equ	0xFEA
  2694                           fsr0l	equ	0xFE9
  2695                           wreg	equ	0xFE8
  2696                           postdec1	equ	0xFE5
  2697                           fsr1h	equ	0xFE2
  2698                           fsr1l	equ	0xFE1
  2699                           indf2	equ	0xFDF
  2700                           postinc2	equ	0xFDE
  2701                           postdec2	equ	0xFDD
  2702                           fsr2h	equ	0xFDA
  2703                           fsr2l	equ	0xFD9
  2704                           status	equ	0xFD8
  2705                           
  2706 ;; *************** function _CyclicBitBuffer_clearEvent *****************
  2707 ;; Defined at:
  2708 ;;		line 31 in file "CyclicBitBuffer.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;		None
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;		None               void
  2715 ;; Registers used:
  2716 ;;		None
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2722 ;;      Params:         0       0       0       0       0       0       0       0       0
  2723 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2724 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2725 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2726 ;;Total ram usage:        0 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; Hardware stack levels required when called:    2
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_main
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text21
  2737  0006EA                     __ptext21:
  2738                           	opt stack 0
  2739  0006EA                     _CyclicBitBuffer_clearEvent:
  2740                           	opt stack 28
  2741                           
  2742                           ;CyclicBitBuffer.c: 32: CyclicBitBuffer_flags.event = 0;
  2743                           
  2744                           ;incstack = 0
  2745  0006EA  983F               	bcf	_CyclicBitBuffer_flags,4,c
  2746                           
  2747                           ;CyclicBitBuffer.c: 33: CyclicBitBuffer_flags.hasEvent = 0;
  2748  0006EC  903F               	bcf	_CyclicBitBuffer_flags,0,c
  2749  0006EE  0012               	return	
  2750  0006F0                     __end_of_CyclicBitBuffer_clearEvent:
  2751                           	opt stack 0
  2752                           pclatu	equ	0xFFB
  2753                           pclath	equ	0xFFA
  2754                           tblptru	equ	0xFF8
  2755                           tblptrh	equ	0xFF7
  2756                           tblptrl	equ	0xFF6
  2757                           tablat	equ	0xFF5
  2758                           prodh	equ	0xFF4
  2759                           prodl	equ	0xFF3
  2760                           intcon	equ	0xFF2
  2761                           intcon2	equ	0xFF1
  2762                           postinc0	equ	0xFEE
  2763                           fsr0h	equ	0xFEA
  2764                           fsr0l	equ	0xFE9
  2765                           wreg	equ	0xFE8
  2766                           postdec1	equ	0xFE5
  2767                           fsr1h	equ	0xFE2
  2768                           fsr1l	equ	0xFE1
  2769                           indf2	equ	0xFDF
  2770                           postinc2	equ	0xFDE
  2771                           postdec2	equ	0xFDD
  2772                           fsr2h	equ	0xFDA
  2773                           fsr2l	equ	0xFD9
  2774                           status	equ	0xFD8
  2775                           
  2776 ;; *************** function i2_CyclicBitBuffer_resetRead *****************
  2777 ;; Defined at:
  2778 ;;		line 16 in file "CyclicBitBuffer.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;		None               void
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2792 ;;      Params:         0       0       0       0       0       0       0       0       0
  2793 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2795 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2796 ;;Total ram usage:        0 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_high_isr
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text23
  2806  0006B2                     __ptext23:
  2807                           	opt stack 0
  2808  0006B2                     i2_CyclicBitBuffer_resetRead:
  2809                           	opt stack 26
  2810                           
  2811                           ;CyclicBitBuffer.c: 17: readBitIndex = 1;
  2812                           
  2813                           ;incstack = 0
  2814  0006B2  0E01               	movlw	1
  2815  0006B4  6E43               	movwf	_readBitIndex,c
  2816                           
  2817                           ;CyclicBitBuffer.c: 18: readByteIndex = CyclicBitBuffer_buffer;
  2818  0006B6  0E01               	movlw	high _CyclicBitBuffer_buffer
  2819  0006B8  6E3A               	movwf	_readByteIndex+1,c
  2820  0006BA  0EFF               	movlw	low _CyclicBitBuffer_buffer
  2821  0006BC  6E39               	movwf	_readByteIndex,c
  2822  0006BE  0012               	return	
  2823  0006C0                     __end_ofi2_CyclicBitBuffer_resetRead:
  2824                           	opt stack 0
  2825                           pclatu	equ	0xFFB
  2826                           pclath	equ	0xFFA
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           prodh	equ	0xFF4
  2832                           prodl	equ	0xFF3
  2833                           intcon	equ	0xFF2
  2834                           intcon2	equ	0xFF1
  2835                           postinc0	equ	0xFEE
  2836                           fsr0h	equ	0xFEA
  2837                           fsr0l	equ	0xFE9
  2838                           wreg	equ	0xFE8
  2839                           postdec1	equ	0xFE5
  2840                           fsr1h	equ	0xFE2
  2841                           fsr1l	equ	0xFE1
  2842                           indf2	equ	0xFDF
  2843                           postinc2	equ	0xFDE
  2844                           postdec2	equ	0xFDD
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function _WriteTimer0 *****************
  2850 ;; Defined at:
  2851 ;;		line 16 in file "/opt/microchip/xc8/v1.32/sources/pic18/plib/Timers/t0write.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  timer0          2    0[COMRAM] unsigned int 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  timer           2    2[COMRAM] struct Timers
  2856 ;; Return value:  Size  Location     Type
  2857 ;;		None               void
  2858 ;; Registers used:
  2859 ;;		None
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2865 ;;      Params:         2       0       0       0       0       0       0       0       0
  2866 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2867 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2868 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2869 ;;Total ram usage:        4 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; This function calls:
  2872 ;;		Nothing
  2873 ;; This function is called by:
  2874 ;;		_high_isr
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text24
  2879  000646                     __ptext24:
  2880                           	opt stack 0
  2881  000646                     _WriteTimer0:
  2882                           	opt stack 26
  2883                           
  2884                           ;incstack = 0
  2885  000646  C001  F003         	movff	WriteTimer0@timer0,WriteTimer0@timer
  2886  00064A  C002  F004         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
  2887  00064E  C004  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
  2888  000652  C003  FFD6         	movff	WriteTimer0@timer,4054	;volatile
  2889  000656  0012               	return	
  2890  000658                     __end_of_WriteTimer0:
  2891                           	opt stack 0
  2892                           pclatu	equ	0xFFB
  2893                           pclath	equ	0xFFA
  2894                           tblptru	equ	0xFF8
  2895                           tblptrh	equ	0xFF7
  2896                           tblptrl	equ	0xFF6
  2897                           tablat	equ	0xFF5
  2898                           prodh	equ	0xFF4
  2899                           prodl	equ	0xFF3
  2900                           intcon	equ	0xFF2
  2901                           intcon2	equ	0xFF1
  2902                           postinc0	equ	0xFEE
  2903                           fsr0h	equ	0xFEA
  2904                           fsr0l	equ	0xFE9
  2905                           wreg	equ	0xFE8
  2906                           postdec1	equ	0xFE5
  2907                           fsr1h	equ	0xFE2
  2908                           fsr1l	equ	0xFE1
  2909                           indf2	equ	0xFDF
  2910                           postinc2	equ	0xFDE
  2911                           postdec2	equ	0xFDD
  2912                           fsr2h	equ	0xFDA
  2913                           fsr2l	equ	0xFD9
  2914                           status	equ	0xFD8
  2915                           
  2916 ;; *************** function _CyclicBitBuffer_write *****************
  2917 ;; Defined at:
  2918 ;;		line 53 in file "CyclicBitBuffer.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;  b               2    0[COMRAM] int 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;		None
  2923 ;; Return value:  Size  Location     Type
  2924 ;;		None               void
  2925 ;; Registers used:
  2926 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2932 ;;      Params:         2       0       0       0       0       0       0       0       0
  2933 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2934 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2935 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2936 ;;Total ram usage:        3 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; This function calls:
  2939 ;;		Nothing
  2940 ;; This function is called by:
  2941 ;;		_high_isr
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text25
  2946  000508                     __ptext25:
  2947                           	opt stack 0
  2948  000508                     _CyclicBitBuffer_write:
  2949                           	opt stack 26
  2950                           
  2951                           ;CyclicBitBuffer.c: 54: if(b) {
  2952                           
  2953                           ;incstack = 0
  2954  000508  5002               	movf	CyclicBitBuffer_write@b+1,w,c
  2955  00050A  1001               	iorwf	CyclicBitBuffer_write@b,w,c
  2956  00050C  B4D8               	btfsc	status,2,c
  2957  00050E  D007               	goto	i2l1167
  2958                           
  2959                           ;CyclicBitBuffer.c: 55: (*writeByteIndex) |= writeBitIndex;
  2960  000510  C03D  FFD9         	movff	_writeByteIndex,fsr2l
  2961  000514  C03E  FFDA         	movff	_writeByteIndex+1,fsr2h
  2962  000518  5044               	movf	_writeBitIndex,w,c
  2963  00051A  12DF               	iorwf	indf2,f,c
  2964                           
  2965                           ;CyclicBitBuffer.c: 56: } else {
  2966  00051C  D00E               	goto	i2l1169
  2967  00051E                     i2l1167:
  2968                           
  2969                           ;CyclicBitBuffer.c: 57: (*writeByteIndex) = (*writeByteIndex) & (writeBitIndex ^ 0xff);
  2970  00051E  C03D  FFD9         	movff	_writeByteIndex,fsr2l
  2971  000522  C03E  FFDA         	movff	_writeByteIndex+1,fsr2h
  2972  000526  50DF               	movf	indf2,w,c
  2973  000528  6E03               	movwf	??_CyclicBitBuffer_write& (0+255),c
  2974  00052A  5044               	movf	_writeBitIndex,w,c
  2975  00052C  0AFF               	xorlw	255
  2976  00052E  1403               	andwf	??_CyclicBitBuffer_write,w,c
  2977  000530  C03D  FFD9         	movff	_writeByteIndex,fsr2l
  2978  000534  C03E  FFDA         	movff	_writeByteIndex+1,fsr2h
  2979  000538  6EDF               	movwf	indf2,c
  2980  00053A                     i2l1169:
  2981                           
  2982                           ;CyclicBitBuffer.c: 58: }
  2983                           ;CyclicBitBuffer.c: 59: if(0x01 == writeBitIndex) {
  2984  00053A  0444               	decf	_writeBitIndex,w,c
  2985  00053C  A4D8               	btfss	status,2,c
  2986  00053E  D005               	goto	i2l1175
  2987                           
  2988                           ;CyclicBitBuffer.c: 60: writeBitIndex = 0x80;
  2989  000540  0E80               	movlw	128
  2990  000542  6E44               	movwf	_writeBitIndex,c
  2991                           
  2992                           ;CyclicBitBuffer.c: 61: writeByteIndex++;
  2993  000544  4A3D               	infsnz	_writeByteIndex,f,c
  2994  000546  2A3E               	incf	_writeByteIndex+1,f,c
  2995                           
  2996                           ;CyclicBitBuffer.c: 62: } else {
  2997  000548  0012               	return	
  2998  00054A                     i2l1175:
  2999                           
  3000                           ;CyclicBitBuffer.c: 63: writeBitIndex = writeBitIndex >> 1;
  3001  00054A  90D8               	bcf	status,0,c
  3002  00054C  3044               	rrcf	_writeBitIndex,w,c
  3003  00054E  6E44               	movwf	_writeBitIndex,c
  3004  000550  0012               	return	
  3005  000552                     __end_of_CyclicBitBuffer_write:
  3006                           	opt stack 0
  3007                           pclatu	equ	0xFFB
  3008                           pclath	equ	0xFFA
  3009                           tblptru	equ	0xFF8
  3010                           tblptrh	equ	0xFF7
  3011                           tblptrl	equ	0xFF6
  3012                           tablat	equ	0xFF5
  3013                           prodh	equ	0xFF4
  3014                           prodl	equ	0xFF3
  3015                           intcon	equ	0xFF2
  3016                           intcon2	equ	0xFF1
  3017                           postinc0	equ	0xFEE
  3018                           fsr0h	equ	0xFEA
  3019                           fsr0l	equ	0xFE9
  3020                           wreg	equ	0xFE8
  3021                           postdec1	equ	0xFE5
  3022                           fsr1h	equ	0xFE2
  3023                           fsr1l	equ	0xFE1
  3024                           indf2	equ	0xFDF
  3025                           postinc2	equ	0xFDE
  3026                           postdec2	equ	0xFDD
  3027                           fsr2h	equ	0xFDA
  3028                           fsr2l	equ	0xFD9
  3029                           status	equ	0xFD8
  3030                           
  3031 ;; *************** function _CyclicBitBuffer_read *****************
  3032 ;; Defined at:
  3033 ;;		line 36 in file "CyclicBitBuffer.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;		None
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  ret             2    3[COMRAM] int 
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  2    0[COMRAM] int 
  3040 ;; Registers used:
  3041 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3047 ;;      Params:         2       0       0       0       0       0       0       0       0
  3048 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3049 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3050 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3051 ;;Total ram usage:        5 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; This function calls:
  3054 ;;		Nothing
  3055 ;; This function is called by:
  3056 ;;		_high_isr
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text26
  3061  0004BA                     __ptext26:
  3062                           	opt stack 0
  3063  0004BA                     _CyclicBitBuffer_read:
  3064                           	opt stack 26
  3065                           
  3066                           ;CyclicBitBuffer.c: 37: int ret = (*readByteIndex) & readBitIndex;
  3067                           
  3068                           ;incstack = 0
  3069  0004BA  C039  FFD9         	movff	_readByteIndex,fsr2l
  3070  0004BE  C03A  FFDA         	movff	_readByteIndex+1,fsr2h
  3071  0004C2  50DF               	movf	indf2,w,c
  3072  0004C4  1443               	andwf	_readBitIndex,w,c
  3073  0004C6  6E03               	movwf	??_CyclicBitBuffer_read& (0+255),c
  3074  0004C8  5003               	movf	??_CyclicBitBuffer_read,w,c
  3075  0004CA  6E04               	movwf	CyclicBitBuffer_read@ret,c
  3076  0004CC  6A05               	clrf	CyclicBitBuffer_read@ret+1,c
  3077                           
  3078                           ;CyclicBitBuffer.c: 39: if(0x01 == readBitIndex) {
  3079  0004CE  0443               	decf	_readBitIndex,w,c
  3080  0004D0  A4D8               	btfss	status,2,c
  3081  0004D2  D005               	goto	i2l1151
  3082                           
  3083                           ;CyclicBitBuffer.c: 40: readBitIndex = 0x80;
  3084  0004D4  0E80               	movlw	128
  3085  0004D6  6E43               	movwf	_readBitIndex,c
  3086                           
  3087                           ;CyclicBitBuffer.c: 41: readByteIndex++;
  3088  0004D8  4A39               	infsnz	_readByteIndex,f,c
  3089  0004DA  2A3A               	incf	_readByteIndex+1,f,c
  3090                           
  3091                           ;CyclicBitBuffer.c: 42: } else {
  3092  0004DC  D003               	goto	i2l136
  3093  0004DE                     i2l1151:
  3094                           
  3095                           ;CyclicBitBuffer.c: 43: readBitIndex = readBitIndex >> 1;
  3096  0004DE  90D8               	bcf	status,0,c
  3097  0004E0  3043               	rrcf	_readBitIndex,w,c
  3098  0004E2  6E43               	movwf	_readBitIndex,c
  3099  0004E4                     i2l136:
  3100                           
  3101                           ;CyclicBitBuffer.c: 44: }
  3102                           ;CyclicBitBuffer.c: 46: if(0 < ret) {
  3103  0004E4  5005               	movf	CyclicBitBuffer_read@ret+1,w,c
  3104  0004E6  0A80               	xorlw	128
  3105  0004E8  0F80               	addlw	-128
  3106  0004EA  0E01               	movlw	1
  3107  0004EC  B4D8               	btfsc	status,2,c
  3108  0004EE  5C04               	subwf	CyclicBitBuffer_read@ret,w,c
  3109  0004F0  A0D8               	btfss	status,0,c
  3110  0004F2  D005               	goto	i2l1159
  3111                           
  3112                           ;CyclicBitBuffer.c: 47: return 1;
  3113  0004F4  0E00               	movlw	0
  3114  0004F6  6E02               	movwf	?_CyclicBitBuffer_read+1,c
  3115  0004F8  0E01               	movlw	1
  3116  0004FA  6E01               	movwf	?_CyclicBitBuffer_read,c
  3117  0004FC  0012               	return	
  3118  0004FE                     i2l1159:
  3119                           
  3120                           ;CyclicBitBuffer.c: 49: return 0;
  3121  0004FE  0E00               	movlw	0
  3122  000500  6E02               	movwf	?_CyclicBitBuffer_read+1,c
  3123  000502  0E00               	movlw	0
  3124  000504  6E01               	movwf	?_CyclicBitBuffer_read,c
  3125  000506  0012               	return	
  3126  000508                     __end_of_CyclicBitBuffer_read:
  3127                           	opt stack 0
  3128                           pclatu	equ	0xFFB
  3129                           pclath	equ	0xFFA
  3130                           tblptru	equ	0xFF8
  3131                           tblptrh	equ	0xFF7
  3132                           tblptrl	equ	0xFF6
  3133                           tablat	equ	0xFF5
  3134                           prodh	equ	0xFF4
  3135                           prodl	equ	0xFF3
  3136                           intcon	equ	0xFF2
  3137                           intcon2	equ	0xFF1
  3138                           postinc0	equ	0xFEE
  3139                           fsr0h	equ	0xFEA
  3140                           fsr0l	equ	0xFE9
  3141                           wreg	equ	0xFE8
  3142                           postdec1	equ	0xFE5
  3143                           fsr1h	equ	0xFE2
  3144                           fsr1l	equ	0xFE1
  3145                           indf2	equ	0xFDF
  3146                           postinc2	equ	0xFDE
  3147                           postdec2	equ	0xFDD
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           pclatu	equ	0xFFB
  3152                           pclath	equ	0xFFA
  3153                           tblptru	equ	0xFF8
  3154                           tblptrh	equ	0xFF7
  3155                           tblptrl	equ	0xFF6
  3156                           tablat	equ	0xFF5
  3157                           prodh	equ	0xFF4
  3158                           prodl	equ	0xFF3
  3159                           intcon	equ	0xFF2
  3160                           intcon2	equ	0xFF1
  3161                           postinc0	equ	0xFEE
  3162                           fsr0h	equ	0xFEA
  3163                           fsr0l	equ	0xFE9
  3164                           wreg	equ	0xFE8
  3165                           postdec1	equ	0xFE5
  3166                           fsr1h	equ	0xFE2
  3167                           fsr1l	equ	0xFE1
  3168                           indf2	equ	0xFDF
  3169                           postinc2	equ	0xFDE
  3170                           postdec2	equ	0xFDD
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           
  3175                           	psect	rparam
  3176  0000                     pclatu	equ	0xFFB
  3177                           pclath	equ	0xFFA
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           prodh	equ	0xFF4
  3183                           prodl	equ	0xFF3
  3184                           intcon	equ	0xFF2
  3185                           intcon2	equ	0xFF1
  3186                           postinc0	equ	0xFEE
  3187                           fsr0h	equ	0xFEA
  3188                           fsr0l	equ	0xFE9
  3189                           wreg	equ	0xFE8
  3190                           postdec1	equ	0xFE5
  3191                           fsr1h	equ	0xFE2
  3192                           fsr1l	equ	0xFE1
  3193                           indf2	equ	0xFDF
  3194                           postinc2	equ	0xFDE
  3195                           postdec2	equ	0xFDD
  3196                           fsr2h	equ	0xFDA
  3197                           fsr2l	equ	0xFD9
  3198                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1551
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     54      68
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    RF433_receive@bufferLength	PTR unsigned short  size(2) Largest target is 6
		 -> main@frame(COMRAM[5]), 

    writeByteIndex	PTR unsigned char  size(2) Largest target is 1537
		 -> NULL(NULL[0]), CyclicBitBuffer_buffer(BIGRAM[1537]), 

    readByteIndex	PTR unsigned char  size(2) Largest target is 1537
		 -> NULL(NULL[0]), CyclicBitBuffer_buffer(BIGRAM[1537]), 

    Serial_sendFrame@p	PTR unsigned char  size(2) Largest target is 1537
		 -> CyclicBitBuffer_buffer(BIGRAM[1537]), 

    Serial_sendFrame@frame.content	PTR unsigned char  size(2) Largest target is 1537
		 -> CyclicBitBuffer_buffer(BIGRAM[1537]), 

    Serial_sendFrame@frame	PTR const struct serial_frame size(2) Largest target is 6
		 -> main@frame(COMRAM[5]), 

    Serial_readFrame@p	PTR unsigned char  size(2) Largest target is 1537
		 -> CyclicBitBuffer_buffer(BIGRAM[1537]), 

    Serial_readFrame@frame.content	PTR unsigned char  size(2) Largest target is 1537
		 -> CyclicBitBuffer_buffer(BIGRAM[1537]), 

    Serial_readFrame@frame	PTR struct serial_frame size(2) Largest target is 6
		 -> main@frame(COMRAM[5]), 

    sp__RF433_receive	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__CyclicBitBuffer_getBuffer	PTR unsigned char  size(2) Largest target is 1537
		 -> CyclicBitBuffer_buffer(BIGRAM[1537]), 

    S27serial_frame$content	PTR unsigned char  size(2) Largest target is 1537
		 -> CyclicBitBuffer_buffer(BIGRAM[1537]), 

    frame.content	PTR unsigned char  size(2) Largest target is 1537
		 -> CyclicBitBuffer_buffer(BIGRAM[1537]), 


Critical Paths under _main in COMRAM

    _main->_Serial_readFrame
    _main->_Serial_sendFrame
    _configTimer->_OpenTimer0
    _Serial_sendFrame->_Write1USART
    _Serial_readFrame->_Read1USART
    _Serial_configSerialPort->_Open1USART
    _RF433_transmit->_Delay100TCYx
    _RF433_transmit->_Delay1KTCYx
    _RF433_init->_Delay100TCYx
    _RF433_init->_Delay1KTCYx

Critical Paths under _high_isr in COMRAM

    _high_isr->_CyclicBitBuffer_read

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12     7      5    1136
                                             42 COMRAM    12     7      5
         _CyclicBitBuffer_clearEvent
          _CyclicBitBuffer_getBuffer
              _CyclicBitBuffer_reset
                         _RF433_init
                      _RF433_receive
                     _RF433_transmit
            _Serial_configSerialPort
                   _Serial_readFrame
                   _Serial_sendFrame
                        _configClock
            _configInterruptPriority
                        _configPorts
                        _configTimer
 ---------------------------------------------------------------------------------
 (1) _configTimer                                          0     0      0      30
                         _OpenTimer0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      30
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _configPorts                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configInterruptPriority                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configClock                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Serial_sendFrame                                     8     6      2     332
                                             34 COMRAM     8     6      2
                        _Write1USART
 ---------------------------------------------------------------------------------
 (2) _Write1USART                                          1     1      0      15
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serial_readFrame                                     8     6      2     233
                                             34 COMRAM     8     6      2
                         _Read1USART
 ---------------------------------------------------------------------------------
 (2) _Read1USART                                           1     1      0      15
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Serial_configSerialPort                              0     0      0     203
                         _Open1USART
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           6     4      2     203
                                             33 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _RF433_transmit                                       0     0      0      30
          _CyclicBitBuffer_resetRead
                       _Delay100TCYx
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (1) _RF433_receive                                        2     0      2      53
                                             33 COMRAM     2     0      2
              _CyclicBitBuffer_reset
 ---------------------------------------------------------------------------------
 (2) _CyclicBitBuffer_reset                                0     0      0       0
          _CyclicBitBuffer_resetRead
         _CyclicBitBuffer_resetWrite
 ---------------------------------------------------------------------------------
 (3) _CyclicBitBuffer_resetWrite                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CyclicBitBuffer_resetRead                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF433_init                                           0     0      0      30
                       _Delay100TCYx
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (2) _Delay1KTCYx                                          1     1      0      15
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Delay100TCYx                                         1     1      0      15
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CyclicBitBuffer_getBuffer                            2     0      2       0
                                             33 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _CyclicBitBuffer_clearEvent                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                            14    14      0     181
                                              5 COMRAM    14    14      0
               _CyclicBitBuffer_read
              _CyclicBitBuffer_write
                        _WriteTimer0
        i2_CyclicBitBuffer_resetRead
 ---------------------------------------------------------------------------------
 (5) i2_CyclicBitBuffer_resetRead                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _WriteTimer0                                          4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _CyclicBitBuffer_write                                3     1      2      68
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (5) _CyclicBitBuffer_read                                 5     3      2      15
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _low_isr                                             14    14      0       0
                                             19 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CyclicBitBuffer_clearEvent
   _CyclicBitBuffer_getBuffer
   _CyclicBitBuffer_reset
     _CyclicBitBuffer_resetRead
     _CyclicBitBuffer_resetWrite
   _RF433_init
     _Delay100TCYx
     _Delay1KTCYx
   _RF433_receive
     _CyclicBitBuffer_reset
       _CyclicBitBuffer_resetRead
       _CyclicBitBuffer_resetWrite
   _RF433_transmit
     _CyclicBitBuffer_resetRead
     _Delay100TCYx
     _Delay1KTCYx
   _Serial_configSerialPort
     _Open1USART
   _Serial_readFrame
     _Read1USART
   _Serial_sendFrame
     _Write1USART
   _configClock
   _configInterruptPriority
   _configPorts
   _configTimer
     _OpenTimer0

 _high_isr (ROOT)
   _CyclicBitBuffer_read
   _CyclicBitBuffer_write
   _WriteTimer0
   i2_CyclicBitBuffer_resetRead

 _low_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     601      21       75.1%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     36      44       1       71.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      44       6        0.0%
DATA                 0      0     645       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Nov 15 18:02:17 2014

                                  l70 01E2                                    l81 027E  
                                  l73 01F4                                    l90 03BC  
                                  l76 0242                                    l69 01E0  
                                  l93 03CE                                    l87 03B2  
                                  l96 03F2     __end_of_CyclicBitBuffer_resetRead 06B2  
                        __CFG_CP0$OFF 000000                          __CFG_CP1$OFF 000000  
                         __CFG_LVP$ON 000000                                   l101 0426  
                                 l306 0624                                   l260 05F0  
                                 l261 05F2                                   l166 0564  
                                 l293 0496                                   l295 04A0  
                                 l296 04A2                                   l289 0484  
                                 l554 066A                                   l547 067A  
                                 l957 0486                                   l949 0478  
                                 l969 0498                          __CFG_CPB$OFF 000000  
                        __CFG_CPD$OFF 000000                                   u487 066C  
                                 u497 067C                  __size_of_WriteTimer0 0012  
                                 wreg 000FE8                            _TXSTA1bits 000FAC  
                                l1001 0640                                  l1107 0298  
                                l1211 031E                                  l1215 0326  
                                l1081 01B8                                  l1073 0440  
                                l1241 0398                                  l1225 0358  
                                l1235 037E                                  l1199 02F4  
                      Read1USART@data 0022                                  _main 02C2  
                                fsr0h 000FEA                                  fsr1h 000FE2  
                                fsr0l 000FE9                                  fsr2h 000FDA  
                                fsr1l 000FE1                                  indf2 000FDF  
                                fsr2l 000FD9                         __CFG_BORV$190 000000  
                                pclat 000FFA                                  prodh 000FF4  
                                prodl 000FF3                                  start 01A6  
                       __CFG_IESO$OFF 000000                         __CFG_FOSC$HSM 000000  
                       __CFG_MCLRE$ON 000000   __size_of_CyclicBitBuffer_resetWrite 000E  
__size_ofi2_CyclicBitBuffer_resetRead 000E                   __size_of_RF433_init 002C  
                         _Delay1KTCYx 0668                                 ?_main 002B  
               __size_of_Delay100TCYx 0010                ??_CyclicBitBuffer_read 0003  
                               _T0CON 000FD5                                 i2l200 00AA  
                               i2l210 00FA                                 i2l136 04E4  
                               i2l209 00EC                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                         __CFG_WRT0$OFF 000000  
                       __CFG_WRT1$OFF 000000                        __CFG_EBTR0$OFF 000000  
                      __CFG_FCMEN$OFF 000000                        __CFG_EBTR1$OFF 000000  
                   ?_Serial_readFrame 0023                         __CFG_WRTB$OFF 000000  
                       __CFG_WRTC$OFF 000000                         __CFG_WRTD$OFF 000000  
                      __CFG_EBTRB$OFF 000000                                 _count 0037  
                  ??_Serial_readFrame 0025                            _Read1USART 0616  
                               main@x 0030                       __end_of_low_isr 01A6  
                               tablat 000FF5                     ?_Serial_sendFrame 0023  
                               status 000FD8                        __CFG_T3CMX$RC0 000000  
                  ??_Serial_sendFrame 0025                       __initialization 05B0  
             _configInterruptPriority 06CC                          _Delay100TCYx 0678  
                        __end_of_main 03B2                            _Open1USART 0462  
         ??_CyclicBitBuffer_getBuffer 0024                                ??_main 0030  
                       __activetblptr 000000                        __CFG_SDOMX$RC7 000000  
                     __CFG_CCP2MX$RC1 000000               ??_CyclicBitBuffer_reset 0022  
                              i2l1151 04DE                                i2l1159 04FE  
                              i2l1175 054A                                i2l1167 051E  
                              i2l1271 00A4                                i2l1169 053A  
                              i2l1265 0092                                i2l1287 00F8  
                          _OpenTimer0 05D6                        __CFG_WDTEN$OFF 000000  
             ??_CyclicBitBuffer_write 0003                                _RCREG1 000FAE  
                              _RCSTA1 000FAB                                _SPBRG1 000FAF  
                              _TXREG1 000FAD                                _TXSTA1 000FAC  
                      __CFG_XINST$OFF 000000                  __size_of_configClock 0004  
                    __end_of_high_isr 0134                  __size_of_configTimer 000E  
                __size_of_configPorts 0020                        __CFG_STVREN$ON 000000  
                    OpenTimer0@config 0022           ??_CyclicBitBuffer_resetRead 0022  
                              clear_0 05B8                                clear_1 05CA  
                           ??_low_isr 0014                                tblptrh 000FF7  
                              tblptrl 000FF6                                tblptru 000FF8  
            ?_Serial_configSerialPort 0001                          ??_RF433_init 0023  
                         ?_Read1USART 0001                  __CFG_LS48MHZ$SYS48X8 000000  
           _CyclicBitBuffer_getBuffer 06E0                         _readByteIndex 0039  
                          __accesstop 0060               __end_of__initialization 05D0  
                     __CFG_PBADEN$OFF 000000             ??_configInterruptPriority 0022  
                      __pcstackCOMRAM 0001                      __CFG_nPWRTEN$OFF 000000  
               __end_of_RF433_receive 06CC                           ?_Open1USART 0022  
                  __end_of_RF433_init 05B0                       __CFG_PCLKEN$OFF 000000  
        ??_CyclicBitBuffer_clearEvent 0022                 Serial_readFrame@frame 0023  
             __size_of_RF433_transmit 0032          ?i2_CyclicBitBuffer_resetRead 0001  
           _CyclicBitBuffer_resetRead 06A4                           ?_OpenTimer0 0001  
                       ??_Write1USART 0022                         _writeBitIndex 0044  
                   __CFG_PLLSEL$PLL4X 000000                          ?_Delay1KTCYx 0001  
                    WriteTimer0@timer 0003                         ??_WriteTimer0 0003  
                 __size_of_Read1USART 001E       __end_of_Serial_configSerialPort 0668  
     __end_of_configInterruptPriority 06D6                      Open1USART@config 0027  
                             _SPBRGH1 000FB0                             ?_high_isr 0001  
                    __CFG_CFGPLLEN$ON 000000         ??i2_CyclicBitBuffer_resetRead 0001  
                 __size_of_Open1USART 0058                               __Hparam 0000  
           __size_of_Serial_readFrame 0118                               __Lparam 0000  
                 __end_of_Write1USART 0646                               __pcinit 05B0  
           __size_of_Serial_sendFrame 00B0                               __ramtop 0800  
                 __size_of_OpenTimer0 0020                               __ptext0 02C2  
                             __ptext1 0688                               __ptext2 05D6  
                             __ptext3 05F6                               __ptext4 06CC  
                             __ptext5 06F0                               __ptext6 03B2  
                             __ptext7 0634                               __ptext8 01AA  
                             __ptext9 0616                             _T0CONbits 000FD5  
       __size_of_CyclicBitBuffer_read 004E          ??_CyclicBitBuffer_resetWrite 0022  
                 __end_of_WriteTimer0 0658                               _low_isr 0134  
                          ??_high_isr 0006                  end_of_initialization 05D0  
      __size_of_CyclicBitBuffer_reset 000A         __end_of_CyclicBitBuffer_reset 06E0  
      __size_of_CyclicBitBuffer_write 004A         __end_of_CyclicBitBuffer_write 0552  
               Serial_sendFrame@frame 0023    __size_of_CyclicBitBuffer_getBuffer 000A  
              CyclicBitBuffer_write@b 0001                               postdec1 000FE5  
                             postdec2 000FDD                               postinc0 000FEE  
                             postinc2 000FDE                             _PORTBbits 000F81  
  __end_of_CyclicBitBuffer_clearEvent 06F0            _CyclicBitBuffer_clearEvent 06EA  
                           _TRISBbits 000F93                        _RF433_transmit 0552  
                        ??_Read1USART 0022                           _CM1CON0bits 000F98  
                         _Write1USART 0634                         ??_configClock 0022  
                       ??_configTimer 0023                         ??_configPorts 0022  
    __size_of_Serial_configSerialPort 0010    __size_of_CyclicBitBuffer_resetRead 000E  
                    Delay100TCYx@unit 0022                          ??_Open1USART 0024  
                         _WriteTimer0 0646                    __end_of_Read1USART 0634  
                __size_of_Delay1KTCYx 0010                   start_initialization 05B0  
              __end_of_RF433_transmit 0584                          ??_OpenTimer0 0022  
              _CyclicBitBuffer_buffer 01FF                       __CFG_nLPBOR$OFF 000000  
                  __end_of_Open1USART 04BA                      _Serial_readFrame 01AA  
                        _readBitIndex 0043                   __end_of_configClock 06F4  
                 __end_of_configTimer 0696                   __end_of_configPorts 0616  
                    _Serial_sendFrame 03B2                    __end_of_OpenTimer0 05F6  
  __end_of_CyclicBitBuffer_resetWrite 06A4            _CyclicBitBuffer_resetWrite 0696  
                         __pbssBIGRAM 01FF                           __pbssCOMRAM 0037  
                     ?_RF433_transmit 0001                __size_of_RF433_receive 000C  
                     Delay1KTCYx@unit 0022              ?_configInterruptPriority 0001  
                   __size_of_high_isr 012C                         ?_Delay100TCYx 0001  
                           __pintcode 0008                       Open1USART@spbrg 0022  
                   WriteTimer0@timer0 0001                        _writeByteIndex 003D  
                            ?_low_isr 0001                     Serial_readFrame@i 0027  
                   Serial_readFrame@p 0029                       Write1USART@data 0022  
                            _LATBbits 000F8A               _Serial_configSerialPort 0658  
                         _configClock 06F0                              _PIE1bits 000F9D  
        __end_of_CyclicBitBuffer_read 0508                           _configTimer 0688  
                         _configPorts 05F6                        ??_Delay100TCYx 0022  
                            _PIR1bits 000F9E                              _RCONbits 000FD0  
                    __CFG_WDTPS$32768 000000             RF433_receive@bufferLength 0022  
                       _RF433_receive 06C0                            _ADCON0bits 000FC2  
         ?_CyclicBitBuffer_clearEvent 0001                             main@frame 0032  
 __end_ofi2_CyclicBitBuffer_resetRead 06C0           i2_CyclicBitBuffer_resetRead 06B2  
                         _INTCON2bits 000FF1                     Serial_sendFrame@i 0027  
                   Serial_sendFrame@p 0029                          ?_Write1USART 0001  
               _CyclicBitBuffer_flags 003F                 _CyclicBitBuffer_reset 06D6  
                            __Hrparam 0000                 _CyclicBitBuffer_write 0508  
                            __Lrparam 0000                    __CFG_BOREN$SBORDIS 000000  
                      ?_RF433_receive 0022                          ?_WriteTimer0 0001  
                          _ANSELBbits 000F5C                            _ANSELCbits 000F5D  
            __end_of_Serial_readFrame 02C2                      __size_of_low_isr 0072  
                            __ptext10 0658                              __ptext11 0462  
                            __ptext20 06E0                              __ptext12 0552  
                            __ptext21 06EA                              __ptext13 06C0  
                            __ptext14 06D6                              __ptext23 06B2  
                            __ptext15 0696                              __ptext24 0646  
                            __ptext16 06A4                              __ptext25 0508  
                            __ptext17 0584                              __ptext26 04BA  
                            __ptext18 0668                              __ptext19 0678  
                            _high_isr 0008                            _RF433_init 0584  
           ??_Serial_configSerialPort 0028              __end_of_Serial_sendFrame 0462  
                       __size_of_main 00F0                              _oneCount 0041  
                            _pinValue 0042                              _sendTime 003B  
                       ??_Delay1KTCYx 0022                              main@argc 002B  
                            main@argv 002D            ?_CyclicBitBuffer_getBuffer 0022  
                    ??_RF433_transmit 0023                         _USART1_Status 0040  
         ?_CyclicBitBuffer_resetWrite 0001                            _INTCONbits 000FF2  
                _CyclicBitBuffer_read 04BA                  __end_of_Delay100TCYx 0688  
             CyclicBitBuffer_read@ret 0004                              intlevel2 0000  
              ?_CyclicBitBuffer_reset 0001                            _RCSTA1bits 000FAB  
              ?_CyclicBitBuffer_write 0001                            _OSCCONbits 000FD3  
 __size_of_CyclicBitBuffer_clearEvent 0006                       ??_RF433_receive 0024  
    __size_of_configInterruptPriority 000A                  __CFG_CPUDIV$NOCLKDIV 000000  
          ?_CyclicBitBuffer_resetRead 0001     __end_of_CyclicBitBuffer_getBuffer 06EA  
               ?_CyclicBitBuffer_read 0001                   __end_of_Delay1KTCYx 0678  
                         ?_RF433_init 0001                          ?_configClock 0001  
                        ?_configTimer 0001                          ?_configPorts 0001  
                __size_of_Write1USART 0012  
